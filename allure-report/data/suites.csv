"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Testing litres function with various test inputs [with hours=1787, expected=893, message='should return 893 litres'].

        :return:
        ","3","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing is_prime function with various test data [with number=8033908462571, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Test 'is_loch_ness_monster' function with various test data [with string=""I'm from Scottland. I moved her...ay         to help me find them"", expected=True].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'buy_or_sell' function, negative test case [with market=[('Mulberry', 'Strawberry'), ('P...y'), ('Strawberry', 'Mulberry')], harvested_fruit='Strawberry', expected='ERROR'].

        :return:
        ","0","Testing 'buy_or_sell' function -> negative.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='', expected=False, message='Expected an empty string to return False'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing array_diff function [with a=[], b=[1, 2], expected=[], message='a was [], b was [1,2], expected []'].

        :return:
        ","0","Testing array_diff function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing string_transformer function with multiple test data [with s='ncE  ZpQ O y  A  fBNbw R v rCg ...CjZcRk   kheNwWj PA ZAGpsZamNHb', expected='zagPSzAMnhB pa KHEnWwJ   gIeYcJ... RcG V r FbnBW  a  Y o zPq  NCe'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing alphanumeric function with various test inputs [with password='     ', expected=False].

        The string has the following conditions
        to be alphanumeric only:

        1. At least one character ("""" is not valid).
        2. Allowed characters are uppercase or lowercase
           latin letters and digits from 0 to 9.
        3. No whitespaces or underscore or special chars.

        :return: None
        ","0","Testing alphanumeric function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Advanced Language Features","",""
"
        Testing 'feast' function with various test inputs.

        :return:
        ","0","Testing 'feast' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"A function f(n), should return the n-th member of sequence [with n=1, expected=1].

        :return:
        ","0","test_sequence_2","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Sample testing [with lst=[20, 1, -1, 2, -2, 3, 3, 5, 5, 1, 2, 4, 20, 4, -1, -2, 5], expected=5, msg='should return 5 (because it appears 3 times)'].

        :return:
        ","0","Find the int that appears an odd number of times","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Data Structures","",""
"Testing tickets function with various test inputs [with arr=[25, 50, 25, 100, 25, 25, 50, 10...25, 50, 25, 100, 25, 50, 50, 50], expected='NO', msg='N/A'].

        The new ""Avengers"" movie has just been released!
        There are a lot of people at the cinema box office
        standing in a huge line. Each of them has a single
        100, 50 or 25 dollar bill. An ""Avengers"" ticket
        costs 25 dollars.

        Vasya is currently working as a clerk.
        He wants to sell a ticket to every single person
        in this line.

        Can Vasya sell a ticket to every person and give change
        if he initially has no money and sells the tickets strictly
        in the order people queue?

        The function should return YES, if Vasya can sell
        a ticket to every person and give change with the
        bills he has at hand at that moment. Otherwise return NO.
        :return:
        ","0","Testing tickets function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'group_cities' function with various test data [with seq=['Bb', 'Cbacb', 'Bacaa', 'C', 'A', 'Bccab', 'Ba'], expected=[['A'], ['Ba'], ['Bacaa'], ['Bb'], ['Bccab'], ['C'], ['Cbacb']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"
        Testing length function.

        The method length, which accepts a linked list
        (head), and returns the length of the list.
        :return:
        ","0","Testing length function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing check_for_factor function [with base=9, factor=2, expected=False].

        This function should test if the
        factor is a factor of base.

        Return false if it is not a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Test close_compare function with margin = 3 [with test_data=(1.99, 5, 3), expected=-1, msg='With margin of 3'].

        :return:
        ","0","Testing 'close_compare' function (margin is 3).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"
        Negative numbers cannot be square numbers.

        :return:
        ","0","Negative numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing password function with various test inputs [with string='AbcdefGhijKlmnopQRsTuvwxyZ1234567890', expected=True].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Basic test case [with string='B', expected='B'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 1966 and verify the output', number=1966, expected=[2, 4, 8, 32, 128, 256, 512, 1024]].

        :return:
        ","2","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_diagonal function [with n=20, p=4, expected=20349].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'calculate' function with various test data [with s='100plus200plus300', expected='600'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing growing_plant function [with input_data=(5, 2, 6), expected=2].

        :return:
        ","0","Testing growing_plant function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"
        Test with empty string.

        :return:
        ","0","Test with empty string","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing share_price function with multiple test inputs [with invested=100, changes=[-50, 50], expected='75.00'].

        :return:
        ","0","Testing share_price function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing string_to_array function [with s='CodeWars', expected=['CodeWars']].

        A function to split a string and
        convert it into an array of words.
        :return:
        ","0","Testing string_to_array function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'factorial' function [with n=3, expected=6, msg='factorial for 3 is 6'].

        In mathematics, the factorial of a non-negative integer n,
        denoted by n!, is the product of all positive integers less
        than or equal to n. For example: 5! = 5 * 4 * 3 * 2 * 1 = 120.
        By convention the value of 0! is 1.

        Write a function to calculate factorial for a given input.
        If input is below 0 or above 12 throw an exception of type
        ValueError (Python).
        :return:
        ","0","Testing 'factorial' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing encrypt_this function [with text='The less he spoke the more he heard', expected='84eh 108sse 104e 115eokp 116eh 109ero 104e 104dare'].

        :param self:
        :return:
        ","4","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing large lists.

        :return:
        ","0","Large lists","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing is_prime function with various test data [with number=5, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing decipher_this function [with text='84eh 108sse 104e 115eokp 116eh 109ero 104e 104dare', expected='The less he spoke the more he heard'].

        :param self:
        :return:
        ","16","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing 'or'.

        In logic and mathematics, or is the
        truth-functional operator of (inclusive)
        disjunction, also known as alternation.

        The 'or' of a set of operands is true if
        and only if one or more of its operands is true.

        Source:
        https://en.wikipedia.org/wiki/Logical_disjunction

        :return:
        ","0","OR logical operator","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing invite_more_women function (negative) [with arr=[1, 1, 1], expected=True].

        :return:
        ","0","Testing invite_more_women function (negative)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing calculate_damage with various test data [with test_data=('grass', 'water', 100, 100), expected=100].

        :return:
        ","0","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing the 'valid_braces' function with various test data [with string='{}({})[]', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing Calculator class.

        A simple calculator that given a string of operators '()', '+', '-', '*', '/'
        and numbers separated by spaces will return the value of that expression
        :return: None
        ","4","Testing Calculator class","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Testing hoop_count function (negative).

        :return:
        ","0","Testing hoop_count function (negative test case)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing pig_it function [with text='Pig latin is cool', expected='igPay atinlay siay oolcay'].

        The function should mpve the first letter of each
        word to the end of it, then add ""ay"" to the end
        of the word. Leave punctuation marks untouched.
        :return:
        ","0","Testing pig_it function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing other_angle function with various test data [with a=10, b=20, expected=150].

        :return:
        ","0","You are given two angles -> find the 3rd.","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'order' function with various test data [with sentence='4of Fo1r pe6ople g3ood th5e the2', expected='Fo1r the2 g3ood 4of th5e pe6ople'].

        Your task is to verify that 'order' function
        sorts a given string by following rules:

        1. Each word in the string will contain a single number.
        This number is the position the word should have in
        the result.

        2. Note: Numbers can be from 1 to 9. So 1 will be the
        first word (not 0).

        3. If the input string is empty, return an empty string.
        The words in the input String will only contain valid
        consecutive numbers.
        :return:
        ","16","Testing 'order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing encrypt_this function [with text='Why can we not all be like that wise old bird', expected='87yh 99na 119e 110to 97ll 98e 108eki 116tah 119esi 111dl 98dri'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Basic test case [with string='RGBG', expected='B'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=10, inp='23625700.00'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing duplicate_encode function with various test inputs [with string='recede', expected='()()()'].

        :return:
        ","0","Testing duplicate_encode function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'how_many_dalmatians' function with various test data [with number=100, expected=""Woah that's a lot of dogs!""].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'solve' function with various test data [with arr=[8, 8, 8], expected=12].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing check_for_factor function [with base=24612, factor=3, expected=True].

        This function should test if the
        factor is a factor of base.

        Return true if it is a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing odd_row function with various test data [with n=41, expected=[1641, 1643, 1645, 1647, 1649, 1...1, 1713, 1715, 1717, 1719, 1721]].

        :return:
        ","0","Testing odd_row function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Performance","",""
"
        Testing 'snail' function.

        Given an n x n array, 'snail' function should return the array
        elements arranged from outermost elements to the middle element,
        traveling clockwise.
        :return:
        ","0","Testing 'snail' function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'save' function: negative [with sizes=[11, 13, 15, 17, 19], hd=8, expected=0].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: negative","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing spiralize function.","3","Testing spiralize function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Testing Sudoku class.

        Given a Sudoku data structure with size NxN, N > 0 and √N == integer,
        assert a method that validates if it has been filled out correctly.
        :return:
        ","4","Testing Sudoku class","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=10, inp='09.971730000'].

        :return:
        ","8","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing check_for_factor function [with base=63, factor=7, expected=True].

        This function should test if the
        factor is a factor of base.

        Return true if it is a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"
        Testing 'solution' function.

        The solution should strips all text that follows any
        of a set of comment markers passed in. Any whitespace at
        the end of the line should also be stripped out.
        :return:
        ","0","Testing 'solution' function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='c i n', expected='#CIN', message='Should capitalize first letters...words even when single letters.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing password function with various test inputs [with string=' aA1----', expected=True].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing using big test data [with num=900000, expected=[[112502, 56249], [56254, 28123]...0, 325], [1050, 225], [950, 25]]].

        :return:
        ","0","test_solution_big_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'sum_pairs' function [with ints=[5, 9, 13, -3], s=10, expected=[13, -3], message='should return [13, -3] for sum = 10'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing decipher_this function [with text='', expected=''].

        :param self:
        :return:
        ","7","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing the function with various test data [with arr=[], n=3, expected=[]].

        :return:
        ","0","Testing take function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Test that no_space function with various test dara.

        :return:
        ","0","Test that no_space function removes the spaces","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 128 and verify the output', number=128, expected=[128]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing shark function -> negative.

        :return:
        ","0","Testing shark function (negative)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing smallest function with various test data [with n=400360725952391834, expected=[3460725952391834, 0, 3]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_10","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 18, n: 432, s0: 1004, i0: 1,... 0.00209, a: 0.51, expected: 420].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='[(])', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_prime function with various test data [with number=-1, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","7","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing compute_ranks function [with number=4, games=[[0, 3, 1, 1], [1, 2, 2, 2], [1, 3, 2, 0], [2, 0, 2, 0]], expected=[3, 1, 1, 3]].

        Test the compute_ranks function that organizes a sports
        league in a round-robin-system. Each team meets all other teams.
        In your league a win gives a team 2 points, a draw gives
        both teams 1 point. After some games you have to compute
        the order of the teams in your league. You use the following
        criteria to arrange the teams:
        1. Points.
        2. Scoring differential (the difference between goals
        scored and those conceded).
        3. Goals scored.
        :return:
        ","0","Testing compute_ranks","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'thirt' function with various test data [with n=8529, expected=79].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing 'XOR'.

        Exclusive or exclusive disjunction is a
        logical operation that outputs true only when
        inputs differ (one is true, the other is false).

        XOR outputs true whenever the inputs differ:

        Source:
        https://en.wikipedia.org/wiki/Exclusive_or
        :return:
        ","0","XOR logical operator","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing calc_combinations_per_row function [with n=5, i=4, expected=5].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        And (∧) is the truth-functional operator of logical conjunction.

        The 'and' of a set of operands is true
        if and only if all of its operands are true.

        Source:
        https://en.wikipedia.org/wiki/Logical_conjunction
        :return:
        ","0","AND logical operator","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing 'save' function: positive [with sizes=[4, 8, 15, 16, 23, 42], hd=108, expected=6].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: positive","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'shortest_job_first' function with various test data [with n=([3, 10, 20, 1, 2], 1), expected=16].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing check_for_factor function [with base=24617, factor=3, expected=False].

        This function should test if the
        factor is a factor of base.

        Return false if it is not a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"
        Negative tests.

        :return:
        ","0","Testing period_is_late function (negative)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing compute_ranks function [with number=10, games=[], expected=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]].

        Test the compute_ranks function that organizes a sports
        league in a round-robin-system. Each team meets all other teams.
        In your league a win gives a team 2 points, a draw gives
        both teams 1 point. After some games you have to compute
        the order of the teams in your league. You use the following
        criteria to arrange the teams:
        1. Points.
        2. Scoring differential (the difference between goals
        scored and those conceded).
        3. Goals scored.
        :return:
        ","0","Testing compute_ranks","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing move_zeros function with various test data [with array=[1, 2, 0, 1, 0, 1, 0, 3, 0, 1], expected=[1, 2, 1, 1, 3, 1, 0, 0, 0, 0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing move_zeros function with various test data [with array=[9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9], expected=[9, 9, 1, 2, 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 13, n: 312, s0: 993, i0: 2, ...: 0.0021, a: 0.51, expected: 414].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'sentencify' function with various test data [with words=['i', 'am', 'an', 'AI'], expected='I am an AI.'].

        The function should:
        1. Capitalise the first letter of the first word.
        2. Add a period (.) to the end of the sentence.
        3. Join the words into a complete string, with spaces.
        4. Do no other manipulation on the words.
        :return:
        ","0","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing is_prime function with various test data [with number=8813991225347, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","9","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing calc_combinations_per_row function [with n=0, i=0, expected=1].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_solved function with various test data [with board=[[0, 0, 1], [0, 1, 2], [2, 1, 0]], expected=-1, message='not yet finished'].

        The function should return whether the
        board's current state is solved.

        We want our function to return:

            -1 if the board is not yet finished (there are empty spots),
            1 if ""X"" won,
            2 if ""O"" won,
            0 if it's a cat's game (i.e. a draw).

        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='~><#~><', expected='#'].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","2","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing josephus_survivor function with various test data [with test_data=(14, 2), expected=13].

        In this kata you have to correctly return who
        is the ""survivor"", ie: the last element of a
        Josephus permutation.
        :return:
        ","0","test_josephus_survivor_3","Novice","Wed Jan 01 04:49:32 PST 2025","skipped","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'disemvowel' function with various test data [with input_data='This website is for losers LOL!', expected='Ths wbst s fr lsrs LL!'].

        The string ""This website is for losers LOL!""
        should become ""Ths wbst s fr lsrs LL!"".
        :return:
        ","0","a and b are equal","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing first_non_repeated function with various test data [with s='uqqmsmtnrhjooknjtmllkpuphirsi', expected=None].

        :return:
        ","0","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing max_multiple function with various test data [with divisor=3, bound=10, expected=9].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s='J VVmviAdpIAFzh zs oMHsx  HPvN ...  j cIiQ  Fa GJdk  ECYzH  BkuU ', expected=' bKUu  ecyZh  gjDK fA  CiIq J  ... hpVn  OmhSX ZS vvMVIaDPiafZH j'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 688 and verify the output', number=688, expected=[16, 32, 128, 512]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing flatten function with various test data.

        For this exercise you will create a global flatten method.
        The method takes in any number of arguments and flattens
        them into a single array. If any of the arguments passed in
        are an array then the individual objects within the array
        will be flattened so that they exist at the same level as
        the other arguments. Any nested arrays, no matter how deep,
        should be flattened into the single array result.

        The following are examples of how this function would be
        used and what the expected results would be:

        flatten(1, [2, 3], 4, 5, [6, [7]]) # returns [1, 2, 3, 4, 5, 6, 7]
        flatten('a', ['b', 2], 3, None, [[4], ['c']]) # returns
        ['a', 'b', 2, 3, None, 4, 'c']
        :return:
        ","0","Testing flatten function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=2, inp='1.0'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Positive test cases for gen_primes function testing
        :return:
        ","0","Positive test cases for gen_primes function testing","Helper methods","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","No kyu helper methods","",""
"Testing a function named increment_string [with string='^0000007', expected='^0000008'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named create_city_map [with n=2, expected={(0, 1), (1, 0), (1, 1), (0, 0)}].

        n defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should generate city map with coordinates.
        :return:
        ","0","Testing create_city_map function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='abde[fgh]ijk', expected='abdefghijk'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'calculate' function with various test data [with s='  10plus5  ', expected='15'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Simple negative test.

        :return:
        ","0","Testing toJadenCase function (negative)","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'solve' function with various test data [with arr=[6, 6, 6], expected=9].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing stock_list function with various test data [with list_of_art=['ROXANNE 102', 'RHODODE 123', '...', 'BTSQZFG 239', 'DRTYMKH 060'], list_of_cat=['U', 'V', 'R'], expected='(U : 0) - (V : 0) - (R : 225)'].

        :return:
        ","2","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'has_subpattern' function with various test data [with string='12aa13a21233', expected=True].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing the function with various test data [with data=(50, 25, 2), expected=True].

        :return:
        ","0","Testing zero_fuel function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'move' function with various test data.

        :return:
        ","0","move function tests","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"
        Testing 'goals' function with various test data.

        Verify that the function returns Messi's total
        number of goals in all three leagues.

        :return:
        ","2","goals function verification","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('orange', 'apple'), ('orange', 'pear'), ('apple', 'pear')], harvested_fruit='apple', expected=['sell', 'buy', 'sell']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing string_to_array function [with s='1 2 3', expected=['1', '2', '3']].

        A function to split a string and
        convert it into an array of words.
        :return:
        ","0","Testing string_to_array function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test namelist [with names=[{'name': 'Bart'}, {'name': 'Lis...e': 'Homer'}, {'name': 'Marge'}], expected='Bart, Lisa, Maggie, Homer & Marge', message='Must work with many names'].

        Given:
        an array containing hashes of names

        Return:
        a string formatted as a list of names separated by commas
        except for the last two names, which should be separated
        by an ampersand.

        :return:
        ","2","String with no duplicate chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing calculate function with various test data [with s='1minus2minus3minus4', expected='-8'].

        :return:
        ","1","Testing calculate function","Beginner","Thu Dec 26 08:33:55 PST 2024","passed","Thu Dec 26 08:33:55 PST 2024","Unit Tests","Fundamentals","",""
"Testing alphabet_war function [with battlefield='[ab]adfd[dd]##[abe]dedf[ijk]d#d[h]#', expected='abijk'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing the function with various test data [with arr=[51], n=35, expected=[51]].

        :return:
        ","0","Testing take function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[82, -61, -87, -12, 21, 1], expected=[-12, 82, 21, 1, -61, -87]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'find_missing_number' function with various test data [with numbers=[1, 3, 4], expected=2].

        Test a function that should take a shuffled list of
        unique numbers from 1 to n with one element missing
        (which can be any number including n). Should return
        this missing number.
        :return:
        ","0","Testing the 'find_missing_number' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing gap function with various test inputs [with num=20, expected=1].

        A binary gap within a positive number num is
        any sequence of consecutive zeros that is
        surrounded by ones at both ends in the binary
        representation of num.

        The gap function should return the length of
        its longest binary gap.

        The function should return 0 if num doesn't
        contain a binary gap.
        :return:
        ","0","Testing gap function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"
        Testing Line Safari functionality.

        Negative test cases.
        :return:
        ","0","test_line_negative","Competent","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Test string with mixed type of chars.

        :return:
        ","0","String with mixed type of chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing max_multiple function with various test data [with divisor=1, bound=1, expected=1].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing potion function with various test inputs.

        :return:
        ","0","Testing Potion class","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Classes","",""
"Testing is_prime function with various test data [with number=29, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing move_zeros function with various test data [with array=[0, 0], expected=[0, 0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='10.0.0.0', end='10.0.1.0', expected=256].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_2_10_0_0_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s=' A b C d E f G ', expected=' g F e D c B a '].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","1","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[-94, -99, -100, -99, -96, -99], expected=[-100, -96, -94, -99]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'order' function with various test data [with sentence='is2 Thi1s T4est 3a', expected='Thi1s is2 3a T4est'].

        Your task is to verify that 'order' function
        sorts a given string by following rules:

        1. Each word in the string will contain a single number.
        This number is the position the word should have in
        the result.

        2. Note: Numbers can be from 1 to 9. So 1 will be the
        first word (not 0).

        3. If the input string is empty, return an empty string.
        The words in the input String will only contain valid
        consecutive numbers.
        :return:
        ","0","Testing 'order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'solve' function with various test data [with arr=[4, 1, 1], expected=2].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Test the 'warn' func when the wolf in the beginning.

        If the wolf is the closest animal to you,
        return ""Pls go away and stop eating my sheep"".
        :return:
        ","0","Wolf at the beginning of the queue","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Control Flow","",""
"Testing the function with various test data [with s='n!!ice!!123', expected=7].

        :return:
        ","0","Testing count_letters_and_digits function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing string_transformer function with multiple test data [with s='Alc   Rl VLEE      k xLU c c', expected='C C Xlu K      vlee rL   aLC'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing is_palindrome function with various test inputs [with string='Abba', expected=True].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing smallest function with various test data [with n=296837, expected=[239687, 4, 1]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_04","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing pig_it function [with text='This is my string', expected='hisTay siay ymay tringsay'].

        The function should mpve the first letter of each
        word to the end of it, then add ""ay"" to the end
        of the word. Leave punctuation marks untouched.
        :return:
        ","0","Testing pig_it function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='Codewars Is Nice', expected='#CodewarsIsNice', message='Should remove spaces.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Test 'is_loch_ness_monster' function with various test data [with string='I will be at the office by 3:50...e 3, to discuss with 50 clients', expected=False].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing move_zeros function with various test data [with array=[False], expected=[False]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing max_multiple function with various test data [with divisor=2, bound=7, expected=6].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='170.0.0.0', end='170.1.0.0', expected=65536].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_3_170_0_0_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'string_to_math' function with various test data [with s='1plus2plus3minus4', expected='1+2+3-4'].

        :return:
        ","0","Testing 'string_to_math' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"In this kata, you must create a digital root function [with n=493193, expected=2].

        A digital root is the recursive sum of all the digits
        in a number. Given n, take the sum of the digits of n.
        If that value has more than one digit, continue reducing
        in this way until a single-digit number is produced. This
        is only applicable to the natural numbers.
        :return:
        ","0","Testing digital_root function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'has_subpattern' function with various test data [with string='abcd', expected=False].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"0 is a square number [with test_str='()()('].

        :return:
        ","0","Simple test for invalid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'solve' function with various test data [with arr=[12, 12, 12], expected=18].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing password function with various test inputs [with string='ABCD1234', expected=False].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'calculate' function with various test data [with s='  20minus10  ', expected='10'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test close_compare function with margin = 3 [with test_data=(8.1, 5, 3), expected=1, msg='With margin of 3'].

        :return:
        ","16","Testing 'close_compare' function (margin is 3).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing fix_the_meerkat function with various test data [with arr=['ground', 'rainbow', 'sky'], expected=['sky', 'rainbow', 'ground']].

        You will be given an array which will have
        three values (tail, body, head).
        It is your job to re-arrange the array so
        that the animal is the right way round
        (head, body, tail).
        :return:
        ","0","fix_the_meerkat function function verification","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Test non-consecutive positive numbers.

        If we have an array [1,2,3,4,6,7,8] then 1 then 2
        then 3 then 4 are all consecutive but 6 is not,
        so that's the first non-consecutive number.
        :return:
        ","0","Non consecutive number should be returned","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing a function named increment_string [with string='foo', expected='foo1'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing using medium test data [with num=9004, expected=[[2252, 1125]]].

        :return:
        ","0","test_solution_medium_1","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s='Example string', expected='STRING eXAMPLE'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Testing shark function -> positive #1.

        :return:
        ","0","Testing shark function (positive)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('orange', 'apple'), ('pear', 'orange'), ('apple', 'pear')], harvested_fruit='apple', expected=['sell', 'sell', 'sell']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=4, inp='90.00'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Test namelist [with names=[{'name': 'Bart'}], expected='Bart', message='Wrong output for a single name'].

        Given:
        an array containing hashes of names

        Return:
        a string formatted as a list of names separated by commas
        except for the last two names, which should be separated
        by an ampersand.

        :return:
        ","0","String with no duplicate chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'is_isogram' function [with string='isIsogram', expected=False, message=''].

        :return:
        ","0","Testing 'is_isogram' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'checkchoose' function with various test data [with m=35, n=7, expected=3].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Returns [] if list has only one element.

        :return:
        ","0","'multiply' function verification with one element list","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Basic test case [with string='RBRGBRBGGRRRBGBBBGG', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Testing 'DefaultList' class: pop.

        :return:
        ","0","Testing 'DefaultList' class: pop","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"Testing move_zeros function with various test data [with array=['a', 0, 0, 'b', None, 'c', 'd',... [], 0, 1, 9, 0, 0, {}, 0, 0, 9], expected=['a', 'b', None, 'c', 'd', 1, Fa...9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='sTreSS', expected='T'].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=0, inp='0'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing is_prime function with various test data [with number=29, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing century function with various test data [with year=1705, expected=18, message='Testing for year 1705'].

        :return:
        ","2","Testing century function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Numbers","",""
"Testing century function with various test data [with year=1601, expected=17, message='Testing for year 1601'].

        :return:
        ","0","Testing century function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Numbers","",""
"Testing password function with various test inputs [with string='abcd1234', expected=False].

        :return:
        ","2","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'sum_pairs' function [with ints=[1, 4, 8, 7, 3, 15], s=8, expected=[1, 7], message='should return [1, 7] for sum = 8'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing likes function with various test data [with names=['Alex', 'Jacob', 'Mark', 'Max'], expected='Alex, Jacob and 2 others like this'].

        :return:
        ","0","Testing likes function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Returns a list that misses only one element.

        :return:
        ","2","'multiply' function verification with random list","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[7, 3, 14, 17], expected=[14, 17, 7, 3]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Basic test case [with string='GBBRBRGGGGBRGGBBGGBGBRGRBGRGBB', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Testing Walker class.

        Testing starting position property based on negative grids.
        ","0","Testing Walker class - position property from negative grids","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing max_multiple function with various test data [with divisor=7, bound=100, expected=98].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='##abde[fgh]ijk', expected=''].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing is_prime function with various test data [with number=529, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named increment_string [with string='foobar099', expected='foobar100'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'has_subpattern' function with various test data [with string='a', expected=False].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"A function f(n), should return the n-th member of sequence [with n=6541, expected=717373].

        :return:
        ","0","test_sequence_6","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Test valid_parentheses function with invalid large string.

        :return:
        ","0","Test for invalid large string","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'elevator' function with various test data [with elevators=(0, 2, 1), expected='right'].

        :return:
        ","0","Testing elevator function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'string_to_math' function with various test data [with s='1plus2minus3plus4minus5', expected='1+2-3+4-5'].

        :return:
        ","0","Testing 'string_to_math' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing century function with various test data [with year=356, expected=4, message='Testing for year 356'].

        :return:
        ","0","Testing century function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Numbers","",""
"
        Testing 'count_sheep' function.

        Consider an array of sheep where some sheep
        may be missing from their place.
        We need a function that counts the
        number of sheep present in the array
        (true means present).
        :return:
        ","0","Testing 'count_sheep' function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing is_prime function with various test data [with number=23, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'thirt' function with various test data [with n=1111111111, expected=71].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing to_alternating_case function with various test data [with string='Hello World', expected='hELLO wORLD'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing decipher_this function [with text='84eh 109ero 104e 115wa 116eh 108sse 104e 115eokp', expected='The more he saw the less he spoke'].

        :param self:
        :return:
        ","0","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'check_root' function with various test inputs [with string='\\*-3,-2,-1,0', expected='incorrect input'].

        A function which takes numbers separated by commas
        in string format and returns the number which is a
        perfect square and the square root of that number.

        If string contains other characters than number, or
        it has more or less than 4 numbers separated by comma
        function returns 'incorrect input'.

        If string contains 4 numbers but not consecutive it
        returns 'not consecutive'.
        :return:
        ","0","Testing check_root function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing using basic test data [with num=17, expected=[[9, 4]]].

        :return:
        ","0","test_solution_basic_4","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='1.2.3.4', end='5.6.7.8', expected=67372036].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_6_1_2_3_4","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing check_exam function with various test data [with arr1=['a', 'a', 'b', 'c'], arr2=['a', 'a', 'b', 'c'], expected=16].

        The function should return the score for this
        array of answers, giving +4 for each correct answer,
        -1 for each incorrect answer, and +0 for each blank
        answer(empty string).
        :return:
        ","0","Testing check_exam function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"dir_reduc function test suite [with test_array=['NORTH', 'EAST', 'NORTH', 'EAST...'EAST', 'EAST', 'WEST', 'SOUTH'], expected=['NORTH', 'EAST']].

        Test a function dir_reduc which will take an array of
        strings and returns an array of strings with the needless
        directions removed (W<->E or S<->N side by side).

        The Haskell version takes a list of directions with
        data Direction = North | East | West | South.

        The Clojure version returns nil when the path is
        reduced to nothing.

        The Rust version takes a slice of enum Direction
        {NORTH, SOUTH, EAST, WEST}.
        :return:
        ","0","Testing dir_reduc function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=1, inp='1'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing smallest function with various test data [with n=346674147588841927, expected=[134667414758884927, 14, 0]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_06","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Negative numbers cannot be square numbers [with test_str='(()())()'].

        :return:
        ","0","Simple test for valid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='180.0.0.0', end='181.0.0.0', expected=16777216].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_7_180_0_0_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing is_palindrome function with various test inputs [with string='Kasue', expected=False].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing smallest function with various test data [with n=614132919143656569, expected=[141326919143656569, 0, 5]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_13","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'solve' function with various test data [with arr=[10, 9, 6], expected=12].

        :return:
        ","4","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'parts_sums' function with various test data [with input_ls=[1, 2, 3, 4, 5, 6], expected=[21, 20, 18, 15, 11, 6, 0]].

        :return:
        ","0","Testing 'parts_sums' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing calc class.

        Given a mathematical expression as a string you
        must return the result as a number.
        ","2","Testing calc function","Proficient","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='GB', expected='R'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Negative numbers cannot be square numbers [with test_str='()(())((()))(())()'].

        :return:
        ","16","Simple test for valid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='ab#de[fgh]ij#k', expected=''].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing litres function with various test inputs [with hours=1.4, expected=0, message='should return 0 litres'].

        :return:
        ","0","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing calc_combinations_per_row function [with n=4, i=3, expected=4].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing using medium test data [with num=9008, expected=[[1128, 562]]].

        :return:
        ","0","test_solution_medium_2","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing odd_row function with various test data [with n=2, expected=[3, 5]].

        :return:
        ","0","Testing odd_row function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Performance","",""
"Basic test case [with string='GGBRGBBRBGRRGGGBGBGRGBGGRGRB', expected='R'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[63, -57, 76, -85, 88, 2, -28], expected=[-28, 2, 76, 88, 63, -57, -85]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing array_diff function [with a=[1, 2], b=[1], expected=[2], message='a was [1,2], b was [1], expected [2]'].

        :return:
        ","0","Testing array_diff function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Negative test cases for gen_primes function testing
        :return:
        ","0","Negative test cases for gen_primes function testing","Helper methods","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","No kyu helper methods","",""
"Testing is_prime function with various test data [with number=97444114757, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing tickets function with various test inputs [with arr=[25, 25, 50], expected='YES', msg='All good'].

        The new ""Avengers"" movie has just been released!
        There are a lot of people at the cinema box office
        standing in a huge line. Each of them has a single
        100, 50 or 25 dollar bill. An ""Avengers"" ticket
        costs 25 dollars.

        Vasya is currently working as a clerk.
        He wants to sell a ticket to every single person
        in this line.

        Can Vasya sell a ticket to every person and give change
        if he initially has no money and sells the tickets strictly
        in the order people queue?

        The function should return YES, if Vasya can sell
        a ticket to every person and give change with the
        bills he has at hand at that moment. Otherwise return NO.
        :return:
        ","0","Testing tickets function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing check_exam function with various test data [with arr1=['a', 'a', 'b', 'b'], arr2=['a', 'c', 'b', 'd'], expected=6].

        The function should return the score for this
        array of answers, giving +4 for each correct answer,
        -1 for each incorrect answer, and +0 for each blank
        answer(empty string).
        :return:
        ","8","Testing check_exam function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Test that 'a' and 'b' are equal.

        :return:
        ","0","a and b are equal","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing decipher_this function [with text='82yade 115te 103o', expected='Ready set go'].

        :param self:
        :return:
        ","0","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_prime function with various test data [with number=143, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'sum_pairs' function [with ints=[20, -13, 40], s=-7, expected=None, message='should return None for sum = -7'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Test 'middle_point' function with various test data [with coords=(-1, 0, 2, -2, 4, -1, -3, 8, -4), expected=2, err='Wrong point!'].

        :param coords:
        :param expected:
        :param err:
        :return:
        ","0","Testing 'middle_point' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing easy_line function with various test data [with n=50, expected=100891344545564193334812497256].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_palindrome function with various test inputs [with string='NdjXglGnYGKhQtuAcxNWFwVRZZDMrFmiOPMZsvr', expected=False].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing is_palindrome function with various test inputs [with string='XqmUTaAmrrYitgNwkCwaWdFYsEhfIeOohViba', expected=False].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing 'save' function: positive [with sizes=[4, 4, 4, 3, 3], hd=11, expected=2].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: positive","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing greek_comparator function with various test inputs [with lhs='alpha', rhs='beta', expected='< 0'].

        :return:
        ","0","Testing 'greek_comparator' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string=')(}{][', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test close_compare function with margin = 3 [with test_data=(8, 5, 3), expected=0, msg='With margin of 3'].

        :return:
        ","0","Testing 'close_compare' function (margin is 3).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing to_alternating_case function with various test data [with string='altERnaTIng cAsE', expected='ALTerNAtiNG CaSe'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing is_palindrome function with various test inputs [with string='aba', expected=True].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Negative testing permute_a_palindrome function.

        :return:
        ","0","Testing permute_a_palindrome (negative)","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'count_sheep' function, null value.

        Hint: Don't forget to check for
        bad values like mixed list
        :return:
        ","0","Testing 'count_sheep' function: mixed list","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=1, inp='0003'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing to_alternating_case function with various test data [with string='hello WORLD', expected='HELLO world'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Basic test case [with string='GRBGRGBBRBRGRRGGGGRBRBRGGRB', expected='B'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Test 'longest_repetition' with various test data [with string='ba', expected=('b', 1)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Basic test case for pattern func [with n=1, expected=''].

        :return:
        ","0","Basic test case for pattern func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing zeros function with various test data [with number=10, expected=2, message='Testing with n = 10'].

        Testing 'zeros' program that should calculate the number
        of trailing zeros in a factorial of a given number.
        :return: None
        ","0","Testing zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Test powers function with various test data [with message='Pass n = 1 and verify the output', number=1, expected=[1]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing josephus_survivor function with various test data [with test_data=(11, 19), expected=10].

        In this kata you have to correctly return who
        is the ""survivor"", ie: the last element of a
        Josephus permutation.
        :return:
        ","0","test_josephus_survivor_1","Novice","Wed Jan 01 04:49:32 PST 2025","skipped","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing other_angle function with various test data [with a=60, b=60, expected=60].

        :return:
        ","0","You are given two angles -> find the 3rd.","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing Encoding functionality.","0","Testing Encoding functionality","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing the function with various test data [with n=2, expected=8].

        :return:
        ","0","Testing row_sum_odd_numbers function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing check_for_factor function [with base=2450, factor=5, expected=True].

        This function should test if the
        factor is a factor of base.

        Return true if it is a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing string_to_array function [with s='I love arrays they are my favorite', expected=['I', 'love', 'arrays', 'they', 'are', 'my', 'favorite']].

        A function to split a string and
        convert it into an array of words.
        :return:
        ","0","Testing string_to_array function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Test string with alphabet chars only.

        :return:
        ","0","String with alphabet chars only","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'check_root' function with various test inputs [with string='4,5,6,7', expected='841, 29'].

        A function which takes numbers separated by commas
        in string format and returns the number which is a
        perfect square and the square root of that number.

        If string contains other characters than number, or
        it has more or less than 4 numbers separated by comma
        function returns 'incorrect input'.

        If string contains 4 numbers but not consecutive it
        returns 'not consecutive'.
        :return:
        ","0","Testing check_root function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Sample testing [with lst=[5, 4, 3, 2, 1, 5, 4, 3, 2, 10, 10], expected=1, msg='should return 1 (because it appears 1 time)'].

        :return:
        ","0","Find the int that appears an odd number of times","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Data Structures","",""
"Testing the 'valid_braces' function with various test data [with string='[(])', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing check_exam function with various test data [with arr1=['b', 'c', 'b', 'a'], arr2=['', 'a', 'a', 'c'], expected=0].

        The function should return the score for this
        array of answers, giving +4 for each correct answer,
        -1 for each incorrect answer, and +0 for each blank
        answer(empty string).
        :return:
        ","0","Testing check_exam function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing pig_it function [with text='Hello world !', expected='elloHay orldway !'].

        The function should mpve the first letter of each
        word to the end of it, then add ""ay"" to the end
        of the word. Leave punctuation marks untouched.
        :return:
        ","0","Testing pig_it function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_line function with various test data [with n=13, expected=10400600].

        :return:
        ","16","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'has_subpattern' function with various test data [with string='babababababababa', expected=True].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing solution function [with number=-1, expected=0, msg='Should return 0 for n=-1'].

        If we list all the natural numbers below 10
        that are multiples of 3 or 5, we get 3, 5, 6 and 9.
        The sum of these multiples is 23.

        Finish the solution so that it returns the sum of
        all the multiples of 3 or 5 below the number passed in.

        Note: If the number is a multiple of both 3 and 5,
        only count it once.
        :return:
        ","0","Testing the 'solution' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named increment_string [with string='009', expected='010'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='codewars is nice', expected='#CodewarsIsNice', message='Should capitalize first letters of words.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing calculate_damage with various test data [with test_data=('fire', 'electric', 10, 2), expected=250].

        :return:
        ","0","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing string_transformer function with multiple test data [with s='', expected=''].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing list_squared function [with m=1, n=250, expected=[[1, 1], [42, 2500], [246, 84100]]].

        :return:
        ","3","Testing list_squared function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s='You Know When  THAT  Hotline Bling', expected='bLING hOTLINE  that  wHEN kNOW yOU'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'factorial' function [with n=0, expected=1, msg='factorial for 0 is 1'].

        In mathematics, the factorial of a non-negative integer n,
        denoted by n!, is the product of all positive integers less
        than or equal to n. For example: 5! = 5 * 4 * 3 * 2 * 1 = 120.
        By convention the value of 0! is 1.

        Write a function to calculate factorial for a given input.
        If input is below 0 or above 12 throw an exception of type
        ValueError (Python).
        :return:
        ","0","Testing 'factorial' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'buy_or_sell' function, negative test case [with market=[('Cherry', 'Cucumber'), ('Cherr...y'), ('Cucumber', 'Ugli fruit')], harvested_fruit='Boysenberry', expected='ERROR'].

        :return:
        ","0","Testing 'buy_or_sell' function -> negative.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Test format_duration function.

        Test a function which formats a duration,
        given as a number of seconds, in a human-friendly way.

        The function must accept a non-negative integer.
        If it is zero, it just returns ""now"". Otherwise,
        the duration is expressed as a combination of years,
        days, hours, minutes and seconds.
        :return:
        ","3","Testing format_duration","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'vaporcode' function with various test data.

        :return:
        ","0","Testing 'vaporcode' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing odd_row function with various test data [with n=13, expected=[157, 159, 161, 163, 165, 167, 1...9, 171, 173, 175, 177, 179, 181]].

        :return:
        ","0","Testing odd_row function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Performance","",""
"
        Testing letter_frequency function where all chars are in mixed case.

        :return:
        ","0","All chars are in mixed case","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing the 'valid_braces' function with various test data [with string='{}', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing easy_line function with various test data [with n=19, expected=35345263800].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing a function named increment_string [with string='foobar00', expected='foobar01'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing solution function [with number=4, expected=3, msg='Should return 3 for n=4'].

        If we list all the natural numbers below 10
        that are multiples of 3 or 5, we get 3, 5, 6 and 9.
        The sum of these multiples is 23.

        Finish the solution so that it returns the sum of
        all the multiples of 3 or 5 below the number passed in.

        Note: If the number is a multiple of both 3 and 5,
        only count it once.
        :return:
        ","0","Testing the 'solution' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing set_alarm function with various test inputs [with test_input=(True, True), expected=False, msg='Fails when input is True, True'].

        The function should return true if you are employed
        and not on vacation (because these are the circumstances
        under which you need to set an alarm). It should return
        false otherwise.

        Examples:
        setAlarm(true, true) -> false
        setAlarm(false, true) -> false
        setAlarm(false, false) -> false
        setAlarm(true, false) -> true
        :return:
        ","0","Testing set_alarm function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"The 'sort_array' function [with source_array=[], expected=[]].

        The task is to sort ascending odd numbers but
        even numbers must be on their places.

        Zero isn't an odd number and you don't need to
        move it. If you have an empty array, you need
        to return it.

        :return:
        ","0","Testing the 'sort_array' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'buy_or_sell' function, negative test case [with market=[('Jackfruit', 'Physalis'), ('Ph...'Prune'), ('Prune', 'Tamarind')], harvested_fruit='Tamarind', expected='ERROR'].

        :return:
        ","0","Testing 'buy_or_sell' function -> negative.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'save' function: positive [with sizes=[13], hd=13, expected=1].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: positive","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing move_zeros function with various test data [with array=['a', 0, 0, 'b', 'c', 'd', 0, 1,...1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9], expected=['a', 'b', 'c', 'd', 1, 1, 3, 1,...9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing is_solved function with various test data [with board=[[2, 1, 2], [2, 1, 1], [1, 1, 2]], expected=1, message='winning column'].

        The function should return whether the
        board's current state is solved.

        We want our function to return:

            -1 if the board is not yet finished (there are empty spots),
            1 if ""X"" won,
            2 if ""O"" won,
            0 if it's a cat's game (i.e. a draw).

        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing century function with various test data [with year=2000, expected=20, message='Testing for year 2000'].

        :return:
        ","0","Testing century function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Numbers","",""
"Testing 'parts_sums' function with various test data [with input_ls=[0, 1, 3, 6, 10], expected=[20, 20, 19, 16, 10, 0]].

        :return:
        ","0","Testing 'parts_sums' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing fix_the_meerkat function with various test data [with arr=['bottom', 'middle', 'top'], expected=['top', 'middle', 'bottom']].

        You will be given an array which will have
        three values (tail, body, head).
        It is your job to re-arrange the array so
        that the animal is the right way round
        (head, body, tail).
        :return:
        ","0","fix_the_meerkat function function verification","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing the 'unique_in_order' function with various test data [with test_data=[-544706949, 1830150107, 1830150...3550250, -733550250, -733550250], expected=[-544706949, 1830150107, -125135...4276632, -367750677, -733550250], msg='Should work with randomly generated sequence'].

        :return:
        ","0","Testing the 'unique_in_order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'solve' function with various test data [with arr=[1, 1, 1], expected=1].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='BGBGB', expected='R'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'checkchoose' function with various test data [with m=2, n=12, expected=-1].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'elevator' function with various test data [with elevators=(0, 1, 2), expected='right'].

        :return:
        ","0","Testing elevator function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing string_to_array function [with s='Robin Singh', expected=['Robin', 'Singh']].

        A function to split a string and
        convert it into an array of words.
        :return:
        ","0","Testing string_to_array function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing max_multiple function with various test data [with divisor=50, bound=7, expected=0].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing valid_parentheses with various test data [with test_input='(', expected=False].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing invite_more_women function (positive) [with arr=[], expected=False].

        :return:
        ","0","Testing invite_more_women function (positive)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing epidemic function [with etd=tm: 12, n: 288, s0: 1007, i0: 2,... 0.00206, a: 0.45, expected: 461].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing share_price function with multiple test inputs [with invested=1000, changes=[0, 2, 3, 6], expected='1113.64'].

        :return:
        ","0","Testing share_price function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'how_many_dalmatians' function with various test data [with number=101, expected='101 DALMATIONS!!!'].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing the function with various test data [with n=13, expected=2197].

        :return:
        ","3","Testing row_sum_odd_numbers function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Test the 'warn' func when the wolf in the end.

        If the wolf is not the closest animal to you,
        return ""Oi! Sheep number N! You are about to be eaten by a wolf!""
        where N is the sheep's position in the queue.
        :return:
        ","0","Wolf at the end of the queue","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Control Flow","",""
"Testing 'solution' function with various test data [with value=109, expected='Value is 00109'].

        The function should return a formatted string.
        The return value should equal ""Value is VALUE""
        where value is a 5 digit padded number.
        :return:
        ","2","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing valid_parentheses with various test data [with test_input='', expected=True].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_line function with various test data [with n=4, expected=70].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'string_to_math' function with various test data [with s='1minus2minus3minus4', expected='1-2-3-4'].

        :return:
        ","0","Testing 'string_to_math' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing solution function.

        :return:
        ","0","Testing solution function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing encrypt_this function [with text='Hello', expected='72olle'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Test powers function with various test data [with message='Pass n = 2 and verify the output', number=2, expected=[2]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing stock_list function with various test data [with list_of_art=['ABAR 200', 'CDXE 500', 'BKWR 250', 'BTSQ 890', 'DRTY 600'], list_of_cat=['A', 'B'], expected='(A : 200) - (B : 1140)'].

        :return:
        ","0","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Test 'is_loch_ness_monster' function with various test data [with string=""Did I ever tell you about my ru...       He just wouldn't listen."", expected=False].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing decipher_this function [with text='72olle 103doo 100ya', expected='Hello good day'].

        :param self:
        :return:
        ","0","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=1, inp='0.0'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing check_for_factor function [with base=10, factor=2, expected=True].

        This function should test if the
        factor is a factor of base.

        Return true if it is a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing is_prime function with various test data [with number=13, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing monkey_count function [with n=10, expected=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]].

        You take your son to the forest to see the monkeys.
        You know that there are a certain number there (n),
        but your son is too young to just appreciate the full
        number, he has to start counting them from 1.

        As a good parent, you will sit and count with him.
        Given the number (n), populate an array with all
        numbers up to and including that number, but excluding
        zero.
        :return:
        ","0","Testing monkey_count function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'check_root' function with various test inputs [with string='10,11,12,13,15', expected='incorrect input'].

        A function which takes numbers separated by commas
        in string format and returns the number which is a
        perfect square and the square root of that number.

        If string contains other characters than number, or
        it has more or less than 4 numbers separated by comma
        function returns 'incorrect input'.

        If string contains 4 numbers but not consecutive it
        returns 'not consecutive'.
        :return:
        ","0","Testing check_root function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing to_alternating_case function with various test data [with string='1a2b3c4d5e', expected='1A2B3C4D5E'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"dir_reduc function test suite [with test_array=['NORTH', 'WEST', 'SOUTH', 'EAST'], expected=['NORTH', 'WEST', 'SOUTH', 'EAST']].

        Test a function dir_reduc which will take an array of
        strings and returns an array of strings with the needless
        directions removed (W<->E or S<->N side by side).

        The Haskell version takes a list of directions with
        data Direction = North | East | West | South.

        The Clojure version returns nil when the path is
        reduced to nothing.

        The Rust version takes a slice of enum Direction
        {NORTH, SOUTH, EAST, WEST}.
        :return:
        ","2","Testing dir_reduc function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'checkchoose' function with various test data [with m=1, n=15, expected=0].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing check_for_factor function [with base=653, factor=7, expected=False].

        This function should test if the
        factor is a factor of base.

        Return false if it is not a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"
        Testing shark function -> positive #2.

        :return:
        ","0","Testing shark function (positive)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('orange', 'apple'), ('pear', 'orange'), ('pear', 'apple')], harvested_fruit='apple', expected=['sell', 'sell', 'buy']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Test 'a' an 'b' are positive numbers.

        :return:
        ","0","a an b are positive numbers","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'has_subpattern' function with various test data [with string='ababababa', expected=False].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing a function named agents_cleanup [with agents={(56, 27), (36, 30), (65, 40), (...8), (28, 40), (23, 30), (2, 30)}, n=10, expected=set()].

        agents: is an array of agent coordinates
        n: defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should remove all agents that are outside
        the city boundaries.
        :return:
        ","4","Testing agents_cleanup function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='CodeWars is nice', expected='#CodewarsIsNice', message='Should capitalize all letters o...- all lower case but the first.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing max_multiple function with various test data [with divisor=7, bound=17, expected=14].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'solve' function with various test data [with arr=[4, 4, 3], expected=5].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'how_many_dalmatians' function with various test data [with number=14, expected='More than a handful!'].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing 'count_sheep' function, invalid values.

        Hint: Don't forget to check for
        bad values like null/undefined
        :return:
        ","0","Testing 'count_sheeps' function: bad input","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'shortest_job_first' function with various test data [with n=([3, 10, 10, 20, 1, 2], 2), expected=26].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing monkey_count function [with n=1, expected=[1]].

        You take your son to the forest to see the monkeys.
        You know that there are a certain number there (n),
        but your son is too young to just appreciate the full
        number, he has to start counting them from 1.

        As a good parent, you will sit and count with him.
        Given the number (n), populate an array with all
        numbers up to and including that number, but excluding
        zero.
        :return:
        ","0","Testing monkey_count function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing growing_plant function [with input_data=(100, 10, 910), expected=10].

        :return:
        ","0","Testing growing_plant function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing make_readable function [with seconds=359999, expected='99:59:59'].

        Write a function, which takes a non-negative integer
        (seconds) as input and returns the time in a human-readable
        format (HH:MM:SS)

        HH = hours, padded to 2 digits, range: 00 - 99
        MM = minutes, padded to 2 digits, range: 00 - 59
        SS = seconds, padded to 2 digits, range: 00 - 59

        The maximum time never exceeds 359999 (99:59:59)
        :return:
        ","0","Testing make_readable function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Test 'middle_point' function with various test data [with coords=(0.25, 0.5, 0.75, 3.25, -0.5, -0.25, 1.0, 0.25, 0.5), expected=3, err='Wrong point!'].

        :param coords:
        :param expected:
        :param err:
        :return:
        ","0","Testing 'middle_point' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing array_diff function [with a=[1, 2, 2], b=[], expected=[1, 2, 2], message='a was [1,2,2], b was [], expected [1,2,2]'].

        :return:
        ","0","Testing array_diff function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'generate_hashtag' function with various test data [with string='Codewars', expected='#Codewars', message='Should handle a single word.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing enough function with various test data [with test_dat=(10, 5, 5), expected=0].

        :return:
        ","0","Testing enough function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"
        Testing Warrior class >>> bruce_lee.

        :return:
        ","0","Testing Warrior class >>> bruce_lee","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","OOP","",""
"Testing easy_diagonal function [with n=129100, p=5, expected=6429758786797926366807779220].

        :param self:
        :return:
        ","573","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing greek_comparator function with various test inputs [with lhs='upsilon', rhs='rho', expected='> 0'].

        :return:
        ","0","Testing 'greek_comparator' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing string_transformer function with multiple test data [with s='Example Input', expected='iNPUT eXAMPLE'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing encrypt_this function [with text='Thank you Piotr for all your help', expected='84kanh 121uo 80roti 102ro 97ll 121ruo 104ple'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"The 'sort_array' function [with source_array=[5, 3, 2, 8, 1, 4], expected=[1, 3, 2, 8, 5, 4]].

        The task is to sort ascending odd numbers but
        even numbers must be on their places.

        Zero isn't an odd number and you don't need to
        move it. If you have an empty array, you need
        to return it.

        :return:
        ","0","Testing the 'sort_array' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'is_isogram' function [with string='Dermatoglyphics', expected=True, message=''].

        :return:
        ","0","Testing 'is_isogram' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test 'is_loch_ness_monster' function with various test data [with string=""By 'tree fiddy' I mean 'three fifty'"", expected=True].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing move_zeros function with various test data [with array=[0, 1, None, 2, False, 1, 0], expected=[1, None, 2, False, 1, 0, 0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing litres function with various test inputs [with hours=0, expected=0, message='should return 0 litres'].

        :return:
        ","0","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'disemvowel' function with various test data [with input_data='IeiIvp EIfgoIh,d(kaM]A>EuiGzEoo...swtee pKAUI<ZuuEi\\g)aIAOU !_Lu', expected='vp fgh,d(kM]>GzW K f&swt pK<Z\\g) !_L'].

        The string ""This website is for losers LOL!""
        should become ""Ths wbst s fr lsrs LL!"".
        :return:
        ","0","a and b are equal","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'calculate' function with various test data [with s='1plus2plus3plus4', expected='10'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'thirt' function with various test data [with n=85299258, expected=31].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'solution' function with various test data [with value=0, expected='Value is 00000'].

        The function should return a formatted string.
        The return value should equal ""Value is VALUE""
        where value is a 5 digit padded number.
        :return:
        ","0","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing move_zeros function with various test data [with array=[], expected=[]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","5","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing the 'valid_braces' function with various test data [with string='{}()[]', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing first_non_repeated function with various test data [with s='oirfqjmsrmnhlqgghplpsonkyfijk', expected='y'].

        :return:
        ","0","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing 'sum_triangular_numbers' function with big number as an input.

        :return:
        ","0","Testing 'sum_triangular_numbers' with big number as an input","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing smallest function with various test data [with n=633814808310045545, expected=[63381480831045545, 11, 0]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_08","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing summation function with various test inputs [with num=8, expected=36].

        :return:
        ","0","Testing 'summation' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Control Flow","",""
"
        Test sum_two_smallest_numbers function with various test data.

        :return:
        ","0","Two smallest numbers in the start of the list","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test close_compare function with no margin [with test_data=(6, 5), expected=1, msg='No margin'].

        :return:
        ","0","Testing 'close_compare' function (no margin).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing ips_between function [with start='20.0.0.10', end='20.0.1.0', expected=246].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_1_20_0_0_10","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing smallest function with various test data [with n=209917, expected=[29917, 0, 1]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_01","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing make_readable function [with seconds=60, expected='00:01:00'].

        Write a function, which takes a non-negative integer
        (seconds) as input and returns the time in a human-readable
        format (HH:MM:SS)

        HH = hours, padded to 2 digits, range: 00 - 99
        MM = minutes, padded to 2 digits, range: 00 - 59
        SS = seconds, padded to 2 digits, range: 00 - 59

        The maximum time never exceeds 359999 (99:59:59)
        :return:
        ","0","Testing make_readable function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'calculate' function with various test data [with s='1plus2plus3minus4', expected='2'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='([}{])', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing using big test data [with num=90004, expected=[[22502, 11250]]].

        :return:
        ","0","test_solution_big_1","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing likes function with various test data [with names=['Jacob', 'Alex'], expected='Jacob and Alex like this'].

        :return:
        ","0","Testing likes function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        If there are one or two good ideas, return 'Publish!'.

        :return:
        ","0","Should return 'Publish!'","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing 'calculate' function with various test data [with s='10.5minus5.25', expected='5.25'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing odd_row function with various test data [with n=1, expected=[1]].

        :return:
        ","0","Testing odd_row function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Performance","",""
"Test 'longest_repetition' with various test data [with string='', expected=('', 0)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Testing swap_values function with various test data.

        :return:
        ","0","Testing swap_values function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing calculate_damage with various test data [with test_data=('electric', 'fire', 100, 100), expected=50].

        :return:
        ","0","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing alphabet_war function [with battlefield='[a][b][c]', expected='abc'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing is_prime function with various test data [with number=7301162915, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_diagonal function [with n=7, p=1, expected=28].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_palindrome function with various test inputs [with string='malam', expected=True].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"The 'sort_array' function [with source_array=[5, 3, 1, 8, 0], expected=[1, 3, 5, 8, 0]].

        The task is to sort ascending odd numbers but
        even numbers must be on their places.

        Zero isn't an odd number and you don't need to
        move it. If you have an empty array, you need
        to return it.

        :return:
        ","0","Testing the 'sort_array' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"
        Testing first_non_consecutive function, non-consecutive numbers.

        If the whole array is consecutive then return
        null or Nothing or None.
        :return:
        ","0","Non is expected","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing century function with various test data [with year=1900, expected=19, message='Testing for year 1900'].

        :return:
        ","0","Testing century function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Numbers","",""
"Test 'is_loch_ness_monster' function with various test data [with string='I will absolutely, positively, ...dollars and fifty         cents', expected=False].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'find_missing_number' function with various test data [with numbers=[1, 2, 4], expected=3].

        Test a function that should take a shuffled list of
        unique numbers from 1 to n with one element missing
        (which can be any number including n). Should return
        this missing number.
        :return:
        ","0","Testing the 'find_missing_number' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'group_cities' function with various test data [with seq=['Tokyo', 'London', 'Rome', 'Donlon'], expected=[['Donlon', 'London'], ['Rome'], ['Tokyo']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing duplicate_encode function with various test inputs [with string='din', expected='((('].

        :return:
        ","0","Testing duplicate_encode function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing calculate_damage with various test data [with test_data=('grass', 'fire', 35, 5), expected=175].

        :return:
        ","0","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing josephus_survivor function with various test data [with test_data=(7, 3), expected=4].

        In this kata you have to correctly return who
        is the ""survivor"", ie: the last element of a
        Josephus permutation.
        :return:
        ","0","test_josephus_survivor_0","Novice","Wed Jan 01 04:49:32 PST 2025","skipped","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s='LXOP QmsZs R   i jUor SWDkkhh P...v hGCOSB  e e r piw pXB OqkIbb ', expected=' oQKiBB Pxb PIW R E E  Hgcosb k...p swdKKHH JuOR I   r qMSzS lxop'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing string_transformer function with multiple test data [with s='V Ots Ev k Q bC  jK Db cezl Ydm...ewoHk YnGdGQa LoDorPaUom cSJo s', expected='S CsjO lOdORpAuOM yNgDgqA QEaWQ...yBk CEZL dB Jk  Bc q K eV oTS v'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing two_decimal_places function with various test inputs [with n=4.653725356, expected=4.65, msg=""didn't work for 4.653725356""].

        Each number should be formatted that it is
        rounded to two decimal places. You don't
        need to check whether the input is a valid
        number because only valid numbers are used
        in the tests.
        :return:
        ","0","Testing two_decimal_places function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        domain_name function testing.

        Assert that 'domain_name' function
        returns domain name from given URL string.
        :return:
        ","0","Testing domain_name function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named increment_string [with string='foobar1', expected='foobar2'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Test the 'warn' func when the wolf in the middle.

        If the wolf is the closest animal to you,
        return ""Pls go away and stop eating my sheep"".
        :return:
        ","0","Wolf in the middle of the queue","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Control Flow","",""
"
        Testing get_size function with various inputs.

        :return:
        ","0","get_size function tests","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing calculate_damage with various test data [with test_data=('grass', 'water', 40, 40), expected=100].

        :return:
        ","0","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing the 'valid_braces' function with various test data [with string='(({{[[]]}}))', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'parts_sums' function with various test data [with input_ls=[], expected=[0]].

        :return:
        ","0","Testing 'parts_sums' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"0 is a square number [with test_str='((())'].

        :return:
        ","0","Simple test for invalid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing share_price function with multiple test inputs [with invested=100, changes=[], expected='100.00'].

        :return:
        ","0","Testing share_price function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'calculate' function with various test data [with s='5 minus 3plus2 ', expected='4'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing calc_combinations_per_row function [with n=3, i=2, expected=3].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing alphabet_war function [with battlefield='ab#de[fgh]ijk', expected='fgh'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"0 is a square number [with test_str='())(()'].

        :return:
        ","0","Simple test for invalid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='moonmen', expected='e'].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'elevator' function with various test data [with elevators=(0, 0, 0), expected='right'].

        :return:
        ","0","Testing elevator function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing a function named first_non_repeating_letter [with string='a', expected='a'].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        If there are more than 2 return 'I smell a series!'.

        :return:
        ","0","Should return 'I smell a series!'","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing solution function [with number=1291, expected=388935, msg='Random test'].

        If we list all the natural numbers below 10
        that are multiples of 3 or 5, we get 3, 5, 6 and 9.
        The sum of these multiples is 23.

        Finish the solution so that it returns the sum of
        all the multiples of 3 or 5 below the number passed in.

        Note: If the number is a multiple of both 3 and 5,
        only count it once.
        :return:
        ","0","Testing the 'solution' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'is_isogram' function [with string='', expected=True, message='an empty string is a valid isogram'].

        :return:
        ","0","Testing 'is_isogram' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test namelist [with names=[{'name': 'Bart'}, {'name': 'Lisa'}], expected='Bart & Lisa', message='Must work with two names'].

        Given:
        an array containing hashes of names

        Return:
        a string formatted as a list of names separated by commas
        except for the last two names, which should be separated
        by an ampersand.

        :return:
        ","2","String with no duplicate chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing decipher_this function [with text='84kanh 121uo 80roti 102ro 97ll 121ruo 104ple', expected='Thank you Piotr for all your help'].

        :param self:
        :return:
        ","0","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_prime function with various test data [with number=2, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing men_from_boys function with various test inputs [with arr=[20, 33, 50, 34, 43, 46], expected=[20, 34, 46, 50, 43, 33]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'solve' function with various test data [with arr=[8, 1, 4], expected=5].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named increment_string [with string='', expected='1'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing monkey_count function [with n=5, expected=[1, 2, 3, 4, 5]].

        You take your son to the forest to see the monkeys.
        You know that there are a certain number there (n),
        but your son is too young to just appreciate the full
        number, he has to start counting them from 1.

        As a good parent, you will sit and count with him.
        Given the number (n), populate an array with all
        numbers up to and including that number, but excluding
        zero.
        :return:
        ","0","Testing monkey_count function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing zeros function with various test data [with number=0, expected=0, message='Testing with n = 0'].

        Testing 'zeros' program that should calculate the number
        of trailing zeros in a factorial of a given number.
        :return: None
        ","0","Testing zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing move_zeros function with various test data [with array=['a', 'b'], expected=['a', 'b']].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=7, inp='050030210'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing likes function with various test data [with names=['Peter'], expected='Peter likes this'].

        :return:
        ","0","Testing likes function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Simple positive test.

        :return:
        ","16","Testing toJadenCase function (positive)","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing greek_comparator function with various test inputs [with lhs='psi', rhs='psi', expected='== 0'].

        :return:
        ","0","Testing 'greek_comparator' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'solve' function with various test data [with arr=[9, 8, 6], expected=11].

        :return:
        ","4","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing is_solved function with various test data [with board=[[1, 2, 0], [0, 1, 2], [0, 0, 1]], expected=1, message='wining diagonal'].

        The function should return whether the
        board's current state is solved.

        We want our function to return:

            -1 if the board is not yet finished (there are empty spots),
            1 if ""X"" won,
            2 if ""O"" won,
            0 if it's a cat's game (i.e. a draw).

        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'sentencify' function with various test data [with words=['FIELDS', 'of', 'CORN', 'are', 'to', 'be', 'sown'], expected='FIELDS of CORN are to be sown.'].

        The function should:
        1. Capitalise the first letter of the first word.
        2. Add a period (.) to the end of the sentence.
        3. Join the words into a complete string, with spaces.
        4. Do no other manipulation on the words.
        :return:
        ","0","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing Warrior class >>> tom.

        :return:
        ","0","Testing Warrior class >>> tom","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","OOP","",""
"Testing 'sentencify' function with various test data [with words=[""i'm"", 'afraid', 'I', ""can't"", 'let', 'you', 'do', 'that'], expected=""I'm afraid I can't let you do that.""].

        The function should:
        1. Capitalise the first letter of the first word.
        2. Add a period (.) to the end of the sentence.
        3. Join the words into a complete string, with spaces.
        4. Do no other manipulation on the words.
        :return:
        ","0","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'has_subpattern' function with various test data [with string='123a123a123a', expected=True].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"
        Testing sum_of_intervals function.

        The function should accept an array of intervals,
        and return the sum of all the interval lengths.

        Overlapping intervals should only be counted once.

        Intervals
        Intervals are represented by a pair of integers in
        the form of an array. The first value of the interval
        will always be less than the second value.
        Interval example: [1, 5] is an interval from 1 to 5.
        The length of this interval is 4.
        :return:
        ","2","Testing sum_of_intervals function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Test 'is_loch_ness_monster' function with various test data [with string=""Howdy Pardner. Name's Pete Lexi...f who carries about tree fiddy?"", expected=True].

        :return:
        ","16","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing using basic test data [with num=12, expected=[[4, 1]]].

        :return:
        ","0","test_solution_basic_1","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing is_palindrome function with various test inputs [with string='walter', expected=False].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing zeros function with various test data [with number=12, expected=2, message='Testing with n = 12'].

        Testing 'zeros' program that should calculate the number
        of trailing zeros in a factorial of a given number.
        :return: None
        ","0","Testing zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'check_root' function with various test inputs [with string='10,11,12,13', expected='17161, 131'].

        A function which takes numbers separated by commas
        in string format and returns the number which is a
        perfect square and the square root of that number.

        If string contains other characters than number, or
        it has more or less than 4 numbers separated by comma
        function returns 'incorrect input'.

        If string contains 4 numbers but not consecutive it
        returns 'not consecutive'.
        :return:
        ","0","Testing check_root function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Testing next_bigger function.

        You have to test a function that takes a positive integer
        number and returns the next bigger number formed by the same digits:

        12 ==> 21
        513 ==> 531
        2017 ==> 2071

        If no bigger number can be composed using those digits, return -1.
        :return:
        ","3","Testing next_bigger function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='aa', expected=''].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing password function with various test inputs [with string='4aA1----', expected=True].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'order' function with various test data [with sentence='', expected=''].

        Your task is to verify that 'order' function
        sorts a given string by following rules:

        1. Each word in the string will contain a single number.
        This number is the position the word should have in
        the result.

        2. Note: Numbers can be from 1 to 9. So 1 will be the
        first word (not 0).

        3. If the input string is empty, return an empty string.
        The words in the input String will only contain valid
        consecutive numbers.
        :return:
        ","0","Testing 'order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'generate_hashtag' function with various test data [with string='codewars  is  nice', expected='#CodewarsIsNice', message='Should deal with unnecessary middle spaces.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Basic test case for pattern func [with n=5, expected='22\n4444'].

        :return:
        ","0","Basic test case for pattern func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing anagrams function with various test data [with string='racer', array=['crazer', 'carer', 'racar', 'caers', 'racer'], expected=['carer', 'racer']].

        Test a function that will find all the anagrams of a word from a list.
        You will be given two inputs a word and an array with words. You should
        return an array of all the anagrams or an empty array if there are none.
        :return:
        ","0","Testing anagrams function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing gap function with various test inputs [with num=529, expected=4].

        A binary gap within a positive number num is
        any sequence of consecutive zeros that is
        surrounded by ones at both ends in the binary
        representation of num.

        The gap function should return the length of
        its longest binary gap.

        The function should return 0 if num doesn't
        contain a binary gap.
        :return:
        ","0","Testing gap function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing invite_more_women function (positive) [with arr=[1, -1], expected=False].

        :return:
        ","0","Testing invite_more_women function (positive)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test 'is_loch_ness_monster' function with various test data [with string='Hello, I come from the year 3150 to bring you good news!', expected=False].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'calculate' function with various test data [with s='1minus2minus3minus4', expected='-8'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='{}({})[]', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing stock_list function with various test data [with list_of_art=[], list_of_cat=['B', 'R', 'D', 'X'], expected=''].

        :return:
        ","0","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing calc_combinations_per_row function [with n=2, i=1, expected=2].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing a function named first_non_repeating_letter [with string=""Go hang a salami, I'm a lasagna hog!"", expected=','].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","6","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'has_subpattern' function with various test data [with string='abcdabcaccd', expected=False].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing the function with various test data [with s='!@#$%^&`~.', expected=0].

        :return:
        ","16","Testing count_letters_and_digits function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'has_subpattern' function with various test data [with string='123A123a123a', expected=False].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing encrypt_this function [with text='The more he saw the less he spoke', expected='84eh 109ero 104e 115wa 116eh 108sse 104e 115eokp'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing men_from_boys function with various test inputs [with arr=[12, 89, -38, -78], expected=[-78, -38, 12, 89]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('Raspberry', 'Raspberry'), ('J...'), ('Jabuticaba', 'Raspberry')], harvested_fruit='Raspberry', expected=['sell', 'sell', 'buy']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'find_missing_number' function with various test data [with numbers=[2, 3, 4], expected=1].

        Test a function that should take a shuffled list of
        unique numbers from 1 to n with one element missing
        (which can be any number including n). Should return
        this missing number.
        :return:
        ","0","Testing the 'find_missing_number' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing first_non_repeated function with various test data [with s='ogmhrsoqiklqfmhgnpjsrikmnlpfj', expected=None].

        :return:
        ","0","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'how_many_dalmatians' function with various test data [with number=26, expected='More than a handful!'].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing duplicate_encode function with various test inputs [with string='Success', expected=')())())'].

        :return:
        ","0","Testing duplicate_encode function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Test valid_solution function.

        Test a function validSolution/ValidateSolution/valid_solution()
        that accepts a 2D array representing a Sudoku board, and returns
        true if it is a valid solution, or false otherwise. The cells of
        the sudoku board may also contain 0's, which will represent empty
        cells. Boards containing one or more zeroes are considered to be
        invalid solutions.

        The board is always 9 cells by 9 cells, and every
        cell only contains integers from 0 to 9.
        :return:
        ","0","Testing valid_solution","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_line function with various test data [with n=22, expected=2104098963720].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='([{}])', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing smallest function with various test data [with n=914459749498173781, expected=[144597494981737819, 0, 17]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_11","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing monkey_count function [with n=3, expected=[1, 2, 3]].

        You take your son to the forest to see the monkeys.
        You know that there are a certain number there (n),
        but your son is too young to just appreciate the full
        number, he has to start counting them from 1.

        As a good parent, you will sit and count with him.
        Given the number (n), populate an array with all
        numbers up to and including that number, but excluding
        zero.
        :return:
        ","0","Testing monkey_count function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test namelist [with names=[], expected='', message='Must work with no names'].

        Given:
        an array containing hashes of names

        Return:
        a string formatted as a list of names separated by commas
        except for the last two names, which should be separated
        by an ampersand.

        :return:
        ","2","String with no duplicate chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'calculate' function with various test data [with s=' 1plus2 plus3 ', expected='6'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'shortest_job_first' function with various test data [with n=([3, 10, 20, 1, 2], 0), expected=6].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing is_palindrome function with various test inputs [with string='ZtItThFBUPCSCbtcUfDwXzyajhRIWioUHpVzN', expected=False].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('apple', 'orange'), ('pear', 'orange'), ('apple', 'pear')], harvested_fruit='apple', expected=['buy', 'sell', 'sell']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 20, n: 480, s0: 1000, i0: 1,... 0.00199, a: 0.53, expected: 386].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing the function with various test data [with s='', expected=0].

        :return:
        ","0","Testing count_letters_and_digits function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'unique_in_order' function with various test data [with test_data='AAAABBBCCDAABBB', expected=['A', 'B', 'C', 'D', 'A', 'B'], msg='Should reduce duplicates'].

        :return:
        ","0","Testing the 'unique_in_order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing to_alternating_case function with various test data [with string='HELLO WORLD', expected='hello world'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing make_readable function [with seconds=86399, expected='23:59:59'].

        Write a function, which takes a non-negative integer
        (seconds) as input and returns the time in a human-readable
        format (HH:MM:SS)

        HH = hours, padded to 2 digits, range: 00 - 99
        MM = minutes, padded to 2 digits, range: 00 - 59
        SS = seconds, padded to 2 digits, range: 00 - 59

        The maximum time never exceeds 359999 (99:59:59)
        :return:
        ","10","Testing make_readable function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'sentencify' function with various test data [with words=['yes'], expected='Yes.'].

        The function should:
        1. Capitalise the first letter of the first word.
        2. Add a period (.) to the end of the sentence.
        3. Join the words into a complete string, with spaces.
        4. Do no other manipulation on the words.
        :return:
        ","0","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing set_alarm function with various test inputs [with test_input=(False, False), expected=False, msg='Fails when input is False, False'].

        The function should return true if you are employed
        and not on vacation (because these are the circumstances
        under which you need to set an alarm). It should return
        false otherwise.

        Examples:
        setAlarm(true, true) -> false
        setAlarm(false, true) -> false
        setAlarm(false, false) -> false
        setAlarm(true, false) -> true
        :return:
        ","0","Testing set_alarm function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing move_zeros function with various test data [with array=[0], expected=[0]].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named agents_cleanup [with agents={(99, 99), (1, 1), (0, 0)}, n=2, expected={(1, 1), (0, 0)}].

        agents: is an array of agent coordinates
        n: defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should remove all agents that are outside
        the city boundaries.
        :return:
        ","0","Testing agents_cleanup function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing calculate function with various test data [with s='1plus2plus3plus4', expected='10'].

        :return:
        ","1","Testing calculate function","Beginner","Thu Dec 26 08:33:55 PST 2024","passed","Thu Dec 26 08:33:55 PST 2024","Unit Tests","Fundamentals","",""
"Testing 'how_many_dalmatians' function with various test data [with number=80, expected=""Woah that's a lot of dogs!""].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing the function with various test data [with s='de?=?=tttes!!t', expected=8].

        :return:
        ","0","Testing count_letters_and_digits function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'how_many_dalmatians' function with various test data [with number=10, expected='Hardly any'].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Test with regular string.

        :return:
        ","0","Test with regular string","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Testing 'numericals' function with various test data.

        :return:
        ","0","Testing 'numericals' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='RRRBRRGRRGBGBBRGRGRGRB', expected='B'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing string_transformer function with multiple test data [with s='UOtfi  erH kCk KXzg Io  Y  I TY...f EGXVSvASIyJ p Zf p kV g RI  V', expected='v  ri G Kv P zF P egxvsVasiYj t...aF i  y  iO kxZG KcK ERh  uoTFI'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Testing largestPower function.

        :return:
        ","0","Testing largestPower function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Test 'is_loch_ness_monster' function with various test data [with string='Your girlscout cookies are read... Your total comes to tree fiddy', expected=True].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing tickets function with various test inputs [with arr=[25, 25, 25, 100, 25, 25, 25, 10...0, 100, 25, 25, 50, 100, 50, 50], expected='NO', msg='N/A'].

        The new ""Avengers"" movie has just been released!
        There are a lot of people at the cinema box office
        standing in a huge line. Each of them has a single
        100, 50 or 25 dollar bill. An ""Avengers"" ticket
        costs 25 dollars.

        Vasya is currently working as a clerk.
        He wants to sell a ticket to every single person
        in this line.

        Can Vasya sell a ticket to every person and give change
        if he initially has no money and sells the tickets strictly
        in the order people queue?

        The function should return YES, if Vasya can sell
        a ticket to every person and give change with the
        bills he has at hand at that moment. Otherwise return NO.
        :return:
        ","0","Testing tickets function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"
        Testing 'DefaultList' class: extend.

        :return:
        ","0","Testing 'DefaultList' class: extend","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"Testing compute_ranks function [with number=8, games=[[0, 7, 2, 0]], expected=[1, 2, 2, 2, 2, 2, 2, 8]].

        Test the compute_ranks function that organizes a sports
        league in a round-robin-system. Each team meets all other teams.
        In your league a win gives a team 2 points, a draw gives
        both teams 1 point. After some games you have to compute
        the order of the teams in your league. You use the following
        criteria to arrange the teams:
        1. Points.
        2. Scoring differential (the difference between goals
        scored and those conceded).
        3. Goals scored.
        :return:
        ","0","Testing compute_ranks","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing stock_list function with various test data [with list_of_art=['BKWRK 125', 'BTSQZ 239', 'BBART 350', 'DRTYM 060'], list_of_cat=['B', 'D'], expected='(B : 714) - (D : 60)'].

        :return:
        ","0","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing first_non_repeated function with various test data [with s='1122321235121222', expected='5'].

        :return:
        ","0","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"A function f(n), should return the n-th member of sequence [with n=1435, expected=67909].

        :return:
        ","0","test_sequence_8","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Test close_compare function with no margin [with test_data=(4, 5), expected=-1, msg='No margin'].

        :return:
        ","0","Testing 'close_compare' function (no margin).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing the 'unique_in_order' function with various test data [with test_data='ABBCcAD', expected=['A', 'B', 'C', 'c', 'A', 'D'], msg='Should be case-sensitive'].

        :return:
        ","0","Testing the 'unique_in_order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing max_multiple function with various test data [with divisor=10, bound=50, expected=50].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"In this kata, you must create a digital root function [with n=942, expected=6].

        A digital root is the recursive sum of all the digits
        in a number. Given n, take the sum of the digits of n.
        If that value has more than one digit, continue reducing
        in this way until a single-digit number is produced. This
        is only applicable to the natural numbers.
        :return:
        ","0","Testing digital_root function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_diagonal function [with n=7, p=2, expected=56].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Test with one char only.

        :return:
        ","0","Test with one char only","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing first_non_repeated function with various test data [with s='test', expected='e'].

        :return:
        ","0","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[2, 15, 17, 15, 2, 10, 10, 17, 1, 1], expected=[2, 10, 17, 15, 1]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Test string with no alphabet chars.

        :return:
        ","2","String with no alphabet chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing solution function [with number=200, expected=9168, msg='Should return 9168 for n=200'].

        If we list all the natural numbers below 10
        that are multiples of 3 or 5, we get 3, 5, 6 and 9.
        The sum of these multiples is 23.

        Finish the solution so that it returns the sum of
        all the multiples of 3 or 5 below the number passed in.

        Note: If the number is a multiple of both 3 and 5,
        only count it once.
        :return:
        ","0","Testing the 'solution' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing enough function with various test data [with test_dat=(20, 5, 5), expected=0].

        :return:
        ","0","Testing enough function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing using big test data [with num=90005, expected=[[45003, 22501], [9003, 4499], [981, 467], [309, 37]]].

        :return:
        ","0","test_solution_big_2","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing tickets function with various test inputs [with arr=[25, 100], expected='NO', msg='Vasya will not have enough money to give change to 100 dollars'].

        The new ""Avengers"" movie has just been released!
        There are a lot of people at the cinema box office
        standing in a huge line. Each of them has a single
        100, 50 or 25 dollar bill. An ""Avengers"" ticket
        costs 25 dollars.

        Vasya is currently working as a clerk.
        He wants to sell a ticket to every single person
        in this line.

        Can Vasya sell a ticket to every person and give change
        if he initially has no money and sells the tickets strictly
        in the order people queue?

        The function should return YES, if Vasya can sell
        a ticket to every person and give change with the
        bills he has at hand at that moment. Otherwise return NO.
        :return:
        ","0","Testing tickets function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"
        Positive test cases for is_prime function testing
        :return:
        ","0","Positive test cases for is_prime function testing","Helper methods","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","No kyu helper methods","",""
"Testing 'thirt' function with various test data [with n=987654321, expected=30].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing easy_line function with various test data [with n=0, expected=1].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'has_subpattern' function with various test data [with string='w9TkPyHgTygqGTCBnL94FFa5q1uvyBz...bbgHOnywVG50wwNnzObkddNF5BGzobX', expected=True].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('apple', 'orange'), ('pear', 'orange'), ('pear', 'apple')], harvested_fruit='apple', expected=['buy', 'sell', 'buy']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing to_alternating_case function with various test data [with string='HeLLo WoRLD', expected='hEllO wOrld'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'thirt' function with various test data [with n=321, expected=48].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing invite_more_women function (negative) [with arr=[1, -1, 1], expected=True].

        :return:
        ","0","Testing invite_more_women function (negative)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing epidemic function [with etd=tm: 28, n: 672, s0: 999, i0: 1, ... 0.00197, a: 0.55, expected: 368].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Test powers function with various test data [with message='Pass n = 9007199254740991 and verify the output', number=9007199254740991, expected=[1, 2, 4, 8, 16, 32, 64, 128, 25...1799813685248, 4503599627370496]].

        :return:
        ","2","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='BRGGRBBBBGBRRRRBRBRRBGBGRBGB', expected='B'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 35184372088896 and verify the output', number=35184372088896, expected=[64, 35184372088832]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing the function with various test data [with arr=[0, 1, 2, 3, 5, 8, 13], n=0, expected=[]].

        :return:
        ","0","Testing take function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing easy_line function with various test data [with n=24, expected=32247603683100].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'unique_in_order' function with various test data [with test_data='ooooDDDDDdddddvOORRRRvvvFFFFppp...FFFCVVVVNNNuuuuufffQQQQQfffiiii', expected=['o', 'D', 'd', 'v', 'O', 'R', '...', 'N', 'u', 'f', 'Q', 'f', 'i'], msg='Should work with randomly generated sequence'].

        :return:
        ","0","Testing the 'unique_in_order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'group_cities' function with various test data [with seq=['Tokyo', 'London', 'Rome', 'Donlon', 'Kyoto', 'Paris', 'Okyot'], expected=[['Kyoto', 'Okyot', 'Tokyo'], ['... 'London'], ['Paris'], ['Rome']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'thirt' function with various test data [with n=1234567, expected=87].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"A function f(n), should return the n-th member of sequence [with n=7878, expected=790248].

        :return:
        ","0","test_sequence_7","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'sum_pairs' function [with ints=[0, 2, 0], s=0, expected=[0, 0], message='should return [0, 0] for sum = 0'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 14, n: 336, s0: 996, i0: 2, ... 0.00206, a: 0.41, expected: 483].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing length function where head = None.

        The method length, which accepts a linked list
        (head), and returns the length of the list.
        :return:
        ","0","Testing length function where head = None","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=3, inp='404'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing summation function with various test inputs [with num=22, expected=253].

        :return:
        ","0","Testing 'summation' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Control Flow","",""
"Testing array_diff function [with a=[1, 2, 2], b=[1], expected=[2, 2], message='a was [1,2,2], b was [1], expected [2,2]'].

        :return:
        ","0","Testing array_diff function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing share_price function with multiple test inputs [with invested=100, changes=[-50, 100], expected='100.00'].

        :return:
        ","0","Testing share_price function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'DefaultList' class: insert.

        :return:
        ","0","Testing 'DefaultList' class: insert","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"Testing done_or_not function [with board=[[1, 2, 3, 4, 5, 6, 7, 8, 9], [2...7], [9, 1, 2, 3, 4, 5, 6, 7, 8]], expected='Try again!'].

        Testing a function done_or_not/DoneOrNot passing a board
        (list[list_lines]) as parameter. If the board is valid return
        'Finished!', otherwise return 'Try again!'
        :return:
        ","3","Testing done_or_not function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing decipher_this function [with text='65 119esi 111dl 111lw 108dvei 105n 97n 111ka', expected='A wise old owl lived in an oak'].

        :param self:
        :return:
        ","0","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing easy_diagonal function [with n=1291, p=5, expected=6385476296235036].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing a function named increment_string [with string='foobar001', expected='foobar002'].

        :return:
        ","0","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_line function with various test data [with n=7, expected=3432].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'save' function: positive [with sizes=[100], hd=500, expected=1].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: positive","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"dir_reduc function test suite [with test_array=['WEST', 'NORTH', 'EAST', 'EAST'...ORTH', 'NORTH', 'SOUTH', 'EAST'], expected=['WEST', 'NORTH', 'NORTH', 'EAST']].

        Test a function dir_reduc which will take an array of
        strings and returns an array of strings with the needless
        directions removed (W<->E or S<->N side by side).

        The Haskell version takes a list of directions with
        data Direction = North | East | West | South.

        The Clojure version returns nil when the path is
        reduced to nothing.

        The Rust version takes a slice of enum Direction
        {NORTH, SOUTH, EAST, WEST}.
        :return:
        ","0","Testing dir_reduc function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing make_readable function [with seconds=0, expected='00:00:00'].

        Write a function, which takes a non-negative integer
        (seconds) as input and returns the time in a human-readable
        format (HH:MM:SS)

        HH = hours, padded to 2 digits, range: 00 - 99
        MM = minutes, padded to 2 digits, range: 00 - 59
        SS = seconds, padded to 2 digits, range: 00 - 59

        The maximum time never exceeds 359999 (99:59:59)
        :return:
        ","0","Testing make_readable function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing men_from_boys function with various test inputs [with arr=[82, 91, 72, 76, 76, 100, 85], expected=[72, 76, 82, 100, 91, 85]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing two_decimal_places function with various test inputs [with number=10.1289767789, expected=10.12, msg=""didn't work for 10.1289767789""].

        Each floating-point number should be
        formatted that only the first two
        decimal places are returned.

        You don't need to check whether the input
        is a valid number because only valid numbers
        are used in the tests.

        Don't round the numbers! Just cut them
        after two decimal places!
        :return:
        ","0","Testing two_decimal_places function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Test 'is_loch_ness_monster' function with various test data [with string='Yo, I heard you were on the loo...me know if you need assistance.', expected=False].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'how_many_dalmatians' function with various test data [with number=50, expected='More than a handful!'].

        :param number:
        :param expected:
        :return:
        ","0","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing max_multiple function with various test data [with divisor=22, bound=9, expected=0].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'sum_triangular_numbers' function with zero as an input.

        :return:
        ","0","Testing 'sum_triangular_numbers' with zero","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='##abde[fgh]ijk[mn]op', expected='mn'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing valid_parentheses with various test data [with test_input='()', expected=True].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_diagonal function [with n=100, p=0, expected=101].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'sum_pairs' function [with ints=[4, -2, 3, 3, 4], s=8, expected=[4, 4], message='should return [4, 4] for sum = 8'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing letter_frequency function where all chars are in upper case.

        :return:
        ","0","All chars are in upper case","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing to_alternating_case function with various test data [with string='hello world', expected='HELLO WORLD'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'is_isogram' function [with string='aba', expected=False, message='same chars may not be adjacent'].

        :return:
        ","0","Testing 'is_isogram' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test 'middle_point' function with various test data [with coords=(0, 2, 0, 6, -2, 8, 3, 0, 4), expected=3, err='Wrong point!'].

        :param coords:
        :param expected:
        :param err:
        :return:
        ","0","Testing 'middle_point' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing zeros function with various test data [with number=30, expected=7, message='Testing with n = 30'].

        Testing 'zeros' program that should calculate the number
        of trailing zeros in a factorial of a given number.
        :return: None
        ","0","Testing zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing letter_frequency function where all chars are in lower case.

        :return:
        ","0","All chars are in lower case","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing fix_the_meerkat function with various test data [with arr=['tail', 'body', 'head'], expected=['head', 'body', 'tail']].

        You will be given an array which will have
        three values (tail, body, head).
        It is your job to re-arrange the array so
        that the animal is the right way round
        (head, body, tail).
        :return:
        ","0","fix_the_meerkat function function verification","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Test close_compare function with no margin [with test_data=(5, 5), expected=0, msg='No margin'].

        :return:
        ","0","Testing 'close_compare' function (no margin).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing summation function with various test inputs [with num=213, expected=22791].

        :return:
        ","0","Testing 'summation' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Control Flow","",""
"Testing the function with various test data [with n=19, expected=6859].

        :return:
        ","0","Testing row_sum_odd_numbers function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Sample Tests for make_upper_case function.

        :return:
        ","0","Testing make_upper_case function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Testing easy line function exception.

        :return:
        ","0","Testing easy_line function exception message","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing permute_a_palindrome function with empty string.

        :return:
        ","0","Testing permute_a_palindrome (empty string)","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing using basic test data [with num=20, expected=[[6, 2]]].

        :return:
        ","0","test_solution_basic_5","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing is_palindrome function with various test inputs [with string='a', expected=True].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Test with empty list.

        :return:
        ","0","'multiply' function verification with empty list","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing alphabet_war function [with battlefield='##a[a]b[c]#', expected='c'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"In this kata, you must create a digital root function [with n=16, expected=7].

        A digital root is the recursive sum of all the digits
        in a number. Given n, take the sum of the digits of n.
        If that value has more than one digit, continue reducing
        in this way until a single-digit number is produced. This
        is only applicable to the natural numbers.
        :return:
        ","0","Testing digital_root function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Test powers function with various test data [with message='Pass n = 8197 and verify the output', number=8197, expected=[1, 4, 8192]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        25 is a square number.

        :return:
        ","0","Square numbers (positive)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"
        Testing all_fibonacci_numbers function.

        You're going to provide a needy programmer a
        utility method that generates an infinite sized,
        sequential IntStream (in Python generator)
        which contains all the numbers in a fibonacci
        sequence.

        A fibonacci sequence starts with two 1s.
        Every element afterwards is the sum of
        the two previous elements.
        :return:
        ","0","Testing all_fibonacci_numbers function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='Codewars      ', expected='#Codewars', message='Should handle trailing whitespace.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing men_from_boys function with various test inputs [with arr=[2, 43, 95, 90, 37], expected=[2, 90, 95, 43, 37]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing smallest function with various test data [with n=935855753, expected=[358557539, 0, 8]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_05","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing max_multiple function with various test data [with divisor=1, bound=13, expected=13].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'calculate' function with various test data [with s='1.5plus2.7', expected='4.2'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Testing using empty test data.

        :return:
        ","0","test_solution_empty","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 13, n: 312, s0: 999, i0: 1, ... 0.00221, a: 0.55, expected: 409].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Verify that multiply function returns correct results.

        :return:
        ","0","'multiply' function verification","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing gap function with various test inputs [with num=15, expected=0].

        A binary gap within a positive number num is
        any sequence of consecutive zeros that is
        surrounded by ones at both ends in the binary
        representation of num.

        The gap function should return the length of
        its longest binary gap.

        The function should return 0 if num doesn't
        contain a binary gap.
        :return:
        ","0","Testing gap function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Test close_compare function with margin = 3 [with test_data=(2, 5, 3), expected=0, msg='With margin of 3'].

        :return:
        ","16","Testing 'close_compare' function (margin is 3).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing the 'valid_braces' function with various test data [with string='[]', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing encrypt_this function [with text='A wise old owl lived in an oak', expected='65 119esi 111dl 111lw 108dvei 105n 97n 111ka'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Test powers function with various test data [with message='Pass n = 32 and verify the output', number=32, expected=[32]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'find_missing_number' function with various test data [with numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...4, 495, 496, 497, 498, 499, 500], expected=36].

        Test a function that should take a shuffled list of
        unique numbers from 1 to n with one element missing
        (which can be any number including n). Should return
        this missing number.
        :return:
        ","0","Testing the 'find_missing_number' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'pyramid' function with various test data.

        The 'pyramid' function should return
        an Array of ascending length sub-arrays.

        Note: the sub-arrays should be filled with 1s.
        :return:
        ","0","Testing the 'pyramid' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Test powers function with various test data [with message='Pass n = 140737488355330 and verify the output', number=140737488355330, expected=[2, 140737488355328]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing calc_combinations_per_row function [with n=6, i=5, expected=6].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing summation function with various test inputs [with num=1, expected=1].

        :return:
        ","0","Testing 'summation' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Control Flow","",""
"Testing calculate_damage with various test data [with test_data=('grass', 'electric', 57, 19), expected=150].

        :return:
        ","0","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing 'shortest_job_first' function with various test data [with n=([20, 20, 7, 15, 14, 10, 16, 16,..., 16, 18, 2, 15, 18, 15, 2], 75), expected=1008].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Test string with no duplicate chars.

        Find the first character that repeats
        in a String and return that character.
        :return:
        ","0","String with no duplicate chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"In this kata, you must create a digital root function [with n=132189, expected=6].

        A digital root is the recursive sum of all the digits
        in a number. Given n, take the sum of the digits of n.
        If that value has more than one digit, continue reducing
        in this way until a single-digit number is produced. This
        is only applicable to the natural numbers.
        :return:
        ","0","Testing digital_root function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing list_squared function [with m=960, n=5024, expected=[[1434, 2856100], [1673, 2856100...880, 4884100], [4264, 24304900]]].

        :return:
        ","48","Testing list_squared function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='stress', expected='t'].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing max_multiple function with various test data [with divisor=37, bound=200, expected=185].

        :return:
        ","16","Testing max_multiple function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Basic test case for pattern func [with n=6, expected='22\n4444\n666666'].

        :return:
        ","0","Basic test case for pattern func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing using basic test data [with num=13, expected=[[7, 3]]].

        :return:
        ","2","test_solution_basic_2","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing first_non_repeated function with various test data [with s='teeter', expected='r'].

        :return:
        ","2","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 134217736 and verify the output', number=134217736, expected=[8, 134217728]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Test top_3_words function with various test data.

        :return:
        ","3","Testing top_3_words function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'solution' function with various test data [with value=1204, expected='Value is 01204'].

        The function should return a formatted string.
        The return value should equal ""Value is VALUE""
        where value is a 5 digit padded number.
        :return:
        ","2","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[-17, -45, -15, -33, -85, -56, -86, -30], expected=[-86, -56, -30, -15, -17, -33, -45, -85]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 4 and verify the output', number=4, expected=[4]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'generate_hashtag' function with various test data [with string='Loooooooooooooooooooooooooooooo...ooooooooooooooooooooooooong Cat', expected=False, message='Should return False if the fina... word is longer than 140 chars.'].

        :return:
        ","0","Testing 'generate_hashtag' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'sum_triangular_numbers' function with negative numbers.

        :return:
        ","0","Testing 'sum_triangular_numbers' with negative numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"A function f(n), should return the n-th member of sequence [with n=2, expected=3].

        :return:
        ","0","test_sequence_3","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Test 'longest_repetition' with various test data [with string='cbdeuuu900', expected=('u', 3)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing to_alternating_case function with various test data [with string='12345', expected='12345'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing monkey_count function [with n=20, expected=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ... 13, 14, 15, 16, 17, 18, 19, 20]].

        You take your son to the forest to see the monkeys.
        You know that there are a certain number there (n),
        but your son is too young to just appreciate the full
        number, he has to start counting them from 1.

        As a good parent, you will sit and count with him.
        Given the number (n), populate an array with all
        numbers up to and including that number, but excluding
        zero.
        :return:
        ","0","Testing monkey_count function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Output should not have any spaces. [with n=8, expected='22\n4444\n666666\n88888888'].

        :return:
        ","0","Test no spaces in output.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the function with various test data [with n=1, expected=1].

        :return:
        ","0","Testing row_sum_odd_numbers function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing growing_plant function [with input_data=(10, 9, 4), expected=1].

        :return:
        ","0","Testing growing_plant function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing encrypt_this function [with text='good', expected='103doo'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Test 'longest_repetition' with various test data [with string='aaaabb', expected=('a', 4)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        String subpattern recognition I.

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.
        :return:
        ","0","Testing 'has_subpattern' (part 1) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing alphabet_war function [with battlefield='##abde[fgh]', expected=''].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing is_solved function with various test data [with board=[[1, 1, 1], [0, 2, 2], [0, 0, 0]], expected=1, message='winning row'].

        The function should return whether the
        board's current state is solved.

        We want our function to return:

            -1 if the board is not yet finished (there are empty spots),
            1 if ""X"" won,
            2 if ""O"" won,
            0 if it's a cat's game (i.e. a draw).

        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'shortest_job_first' function with various test data [with n=([4, 13, 13, 12, 17, 4, 15, 4, 1...12, 11, 18, 3, 4, 9, 5, 19], 24), expected=275].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing valid_parentheses with various test data [with test_input='hi())(', expected=False].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='BRBBGGRGBGGGBGRBRGRGRRBBGBR', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'factorial' function [with n=2, expected=2, msg='factorial for 2 is 2'].

        In mathematics, the factorial of a non-negative integer n,
        denoted by n!, is the product of all positive integers less
        than or equal to n. For example: 5! = 5 * 4 * 3 * 2 * 1 = 120.
        By convention the value of 0! is 1.

        Write a function to calculate factorial for a given input.
        If input is below 0 or above 12 throw an exception of type
        ValueError (Python).
        :return:
        ","0","Testing 'factorial' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing summation function with various test inputs [with num=100, expected=5050].

        :return:
        ","0","Testing 'summation' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Control Flow","",""
"Testing the function with various test data [with data=(100, 50, 1), expected=False].

        :return:
        ","0","Testing zero_fuel function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Algorithms","",""
"Testing password function with various test inputs [with string='Ab1!@#$%^&*()-_+={}[]|\\:;?/>.<,', expected=True].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'calculate' function with various test data [with s='1000minus500plus25', expected='525'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Conditionals tests to verify that greet function returns the proper message.

        :return:
        ","0","Verify that greet function returns the proper message","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Control Flow","",""
"Testing list_squared function [with m=257, n=4195, expected=[[287, 84100], [728, 722500], [1...1673, 2856100], [1880, 4884100]]].

        :return:
        ","37","Testing list_squared function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'checkchoose' function with various test data [with m=75788358475481302186, n=87, expected=-1].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"
        Positive test cases.

        :return:
        ","0","test_line_positive","Competent","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing is_prime function with various test data [with number=857561895605, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='abcde[fgh]', expected='abcdefgh'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Sample testing [with lst=[-15, -14, -11, -11, -7, -7, -7,...-7, -15, -15, -15, -5, -15, -15], expected=-5, msg='Random tests'].

        :return:
        ","0","Find the int that appears an odd number of times","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Data Structures","",""
"
        Test valid_parentheses function with valid large string.

        :return:
        ","0","Test for valid large string","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Test powers function with various test data [with message='Pass n = 514 and verify the output', number=514, expected=[2, 512]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='', expected=''].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Test 'a' or 'b' is negative.

        :return:
        ","0","a or b is negative","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='RB', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing the 'valid_braces' function with various test data [with string='[({})](]', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'elevator' function with various test data [with elevators=(0, 1, 1), expected='right'].

        :return:
        ","0","Testing elevator function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        3 is not a square number.

        :return:
        ","0","Simple test for empty string.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing the function with various test data [with n=41, expected=68921].

        :return:
        ","0","Testing row_sum_odd_numbers function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing litres function with various test inputs [with hours=12.3, expected=6, message='should return 6 litres'].

        :return:
        ","0","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing string_to_array function [with s='', expected=['']].

        A function to split a string and
        convert it into an array of words.
        :return:
        ","0","Testing string_to_array function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'save' function: positive [with sizes=[4, 4, 4, 3, 3], hd=12, expected=3].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: positive","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'buy_or_sell' function, negative test case [with market=[('orange', 'apple'), ('pear', 'orange'), ('apple', 'paer')], harvested_fruit='apple', expected='ERROR'].

        :return:
        ","0","Testing 'buy_or_sell' function -> negative.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'DefaultList' class: __getitem__.

        Called to implement evaluation of self[key]. For sequence
        types, the accepted keys should be integers and slice objects.
        Note that the special interpretation of negative indexes
        (if the class wishes to emulate a sequence type) is up to the
        __getitem__() method.
        :return:
        ","0","Testing 'DefaultList' class: __getitem__","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"0 is a square number [with test_str=')'].

        :return:
        ","0","Simple test for invalid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='[a]#[b]#[c]', expected='ac'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing epidemic function [with etd=tm: 24, n: 576, s0: 1005, i0: 1,... 0.00216, a: 0.45, expected: 474].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='([{}])', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test 'longest_repetition' with various test data [with string='aabb', expected=('a', 2)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing Decoding functionality.","2","Testing Decoding functionality","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing done_or_not function [with board=[[1, 3, 2, 5, 7, 9, 4, 6, 8], [4...4], [8, 7, 9, 6, 4, 2, 1, 3, 5]], expected='Try again!'].

        Testing a function done_or_not/DoneOrNot passing a board
        (list[list_lines]) as parameter. If the board is valid return
        'Finished!', otherwise return 'Try again!'
        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing likes function with various test data [with names=[], expected='no one likes this'].

        :return:
        ","0","Testing likes function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing alphabet_war function [with battlefield='#abde[fgh]i#jk[mn]op', expected='mn'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"
        Testing Walker class.

        Testing starting position property based on positive grids.
        ","14","Testing Walker class - position property from positive grids","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_diagonal function [with n=7, p=0, expected=8].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing first_non_repeated function with various test data [with s='1122321235121222dsfasddssdfa112...ssdf1122321235121222dsfasddssdf', expected='z'].

        :return:
        ","1","Testing first_non_repeated function with various inputs","Beginner","Thu Dec 26 08:33:56 PST 2024","passed","Thu Dec 26 08:33:56 PST 2024","Unit Tests","Data Structures","",""
"Testing is_palindrome function with various test inputs [with string='XqNeuBjbshHwqjoUNGHhVRolqxWRRWYYbN', expected=False].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Basic test case [with string='BBGRBGRRGGGRRBRBRBGRBGRRRBBBG', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing set_alarm function with various test inputs [with test_input=(False, True), expected=False, msg='Fails when input is False, True'].

        The function should return true if you are employed
        and not on vacation (because these are the circumstances
        under which you need to set an alarm). It should return
        false otherwise.

        Examples:
        setAlarm(true, true) -> false
        setAlarm(false, true) -> false
        setAlarm(false, false) -> false
        setAlarm(true, false) -> true
        :return:
        ","0","Testing set_alarm function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Basic test case [with string='RRR', expected='R'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing valid_parentheses with various test data [with test_input='hi(hi)()', expected=True].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing decipher_this function [with text='87yh 99na 119e 110to 97ll 98e 108eki 116tah 119esi 111dl 98dri', expected='Why can we not all be like that wise old bird'].

        :param self:
        :return:
        ","0","Testing decipher_this function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'disemvowel' function with various test data [with input_data='Nt/I\'OvegOI*UdAaEobaE{Gi} I^@*...EI GqrjOal`E"" eeAeSuaTdAu-FISac', expected='Nt/\'vg*db{G} ^@*\\}d%}>*]k Gqrjl`"" STd-FSc'].

        The string ""This website is for losers LOL!""
        should become ""Ths wbst s fr lsrs LL!"".
        :return:
        ","10","a and b are equal","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing the 'valid_braces' function with various test data [with string='(){}[]', expected=True].

        :return:
        ","2","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=9, inp='03.27310000'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        4 is a square number.

        :return:
        ","0","Square numbers (positive)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Test close_compare function with margin = 3 [with test_data=(5, 5, 3), expected=0, msg='With margin of 3'].

        :return:
        ","0","Testing 'close_compare' function (margin is 3).","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Logic","",""
"Testing the 'unique_in_order' function with various test data [with test_data=[1, 2, 2, 3, 3], expected=[1, 2, 3], msg='Should work with different element types'].

        :return:
        ","0","Testing the 'unique_in_order' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Test namelist [with names=[{'name': 'Bart'}, {'name': 'Lisa'}, {'name': 'Maggie'}], expected='Bart, Lisa & Maggie', message='Must work with many names'].

        Given:
        an array containing hashes of names

        Return:
        a string formatted as a list of names separated by commas
        except for the last two names, which should be separated
        by an ampersand.

        :return:
        ","2","String with no duplicate chars","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s='To be OR not to be That is the Question', expected='qUESTION THE IS tHAT BE TO NOT or BE tO'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing a function named create_city_map [with n=0, expected=set()].

        n defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should generate city map with coordinates.
        :return:
        ","0","Testing create_city_map function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=3, inp='4.40'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Test powers function with various test data [with message='Pass n = 512 and verify the output', number=512, expected=[512]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing alphanumeric function with various test inputs [with password='PassW0rd', expected=True].

        The string has the following conditions
        to be alphanumeric only:

        1. At least one character ("""" is not valid).
        2. Allowed characters are uppercase or lowercase
           latin letters and digits from 0 to 9.
        3. No whitespaces or underscore or special chars.

        :return: None
        ","5","Testing alphanumeric function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing the function with various test data [with arr=[0, 1, 2, 3, 5, 8, 13], n=3, expected=[0, 1, 2]].

        :return:
        ","0","Testing take function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test 'longest_repetition' with various test data [with string='abbbbb', expected=('b', 5)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing other_angle function with various test data [with a=30, b=60, expected=90].

        :return:
        ","0","You are given two angles -> find the 3rd.","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing smallest function with various test data [with n=269045, expected=[26945, 3, 0]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_03","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'solve' function with various test data [with arr=[1, 2, 1], expected=2].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'calculate' function with various test data [with s='-10plus20minus-5', expected='15'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing growing_plant function [with input_data=(5, 2, 0), expected=1].

        :return:
        ","0","Testing growing_plant function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 28, n: 672, s0: 980, i0: 1, ... 0.00198, a: 0.44, expected: 433].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Basic test case for pattern func [with n=2, expected='22'].

        :return:
        ","0","Basic test case for pattern func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        0 is a square number.

        :return:
        ","0","Zero","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing two_decimal_places function with various test inputs [with number=4.653725356, expected=4.65, msg=""didn't work for 4.653725356""].

        Each floating-point number should be
        formatted that only the first two
        decimal places are returned.

        You don't need to check whether the input
        is a valid number because only valid numbers
        are used in the tests.

        Don't round the numbers! Just cut them
        after two decimal places!
        :return:
        ","0","Testing two_decimal_places function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing stock_list function with various test data [with list_of_art=['ROXANNE 102', 'RHODODE 123', '...', 'BTSQZFG 239', 'DRTYMKH 060'], list_of_cat=['B', 'R', 'D', 'X'], expected='(B : 364) - (R : 225) - (D : 60) - (X : 0)'].

        :return:
        ","0","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'group_cities' function with various test data [with seq=['Ab', 'Aba', 'A', 'Bbab', 'Baa'...a', 'Bbbb', 'Ac', 'Bcbaa', 'Ab'], expected=[['Aba', 'Baa'], ['A'], ['Ab'], ...], ['Bbbb'], ['Bcbaa'], ['Cac']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing the 'valid_braces' function with various test data [with string='([}{])', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'checkchoose' function with various test data [with m=6, n=4, expected=2].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing password function with various test inputs [with string='Abcd123', expected=False].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing two_decimal_places function with various test inputs [with n=4.659725356, expected=4.66, msg=""didn't work for 4.659725356""].

        Each number should be formatted that it is
        rounded to two decimal places. You don't
        need to check whether the input is a valid
        number because only valid numbers are used
        in the tests.
        :return:
        ","0","Testing two_decimal_places function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Repeating char is a space.

        :return:
        ","0","String alphabet chars and spaces","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing using basic test data [with num=16, expected=[[4, 0]]].

        :return:
        ","0","test_solution_basic_3","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Negative numbers cannot be square numbers [with test_str='()'].

        :return:
        ","16","Simple test for valid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing enough function with various test data [with test_dat=(100, 60, 50), expected=10].

        :return:
        ","0","Testing enough function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'buy_or_sell' function, negative test case [with market=[('Jackfruit', 'Purple mangostee...urple mangosteen', 'Jackfruit')], harvested_fruit='Purple mangosteen', expected='ERROR'].

        :return:
        ","0","Testing 'buy_or_sell' function -> negative.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Test 'longest_repetition' with various test data [with string='bbbaaabaaaa', expected=('a', 4)].

        For a given string s find the character c (or C) with
        the longest consecutive repetition and return: (c, l)
        where l (or L) is the length of the repetition.

        For empty string return: ('', 0)
        :return:
        ","0","Testing 'longest_repetition' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing 'checkchoose' function with various test data [with m=4, n=2, expected=-1].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing password function with various test inputs [with string='', expected=False].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'disemvowel' function with various test data [with input_data='What are you, a communist?', expected='Wht r y,  cmmnst?'].

        The string ""This website is for losers LOL!""
        should become ""Ths wbst s fr lsrs LL!"".
        :return:
        ","0","a and b are equal","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'group_cities' function with various test data [with seq=['Ab', 'Aa'], expected=[['Aa'], ['Ab']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing string_transformer function with multiple test data [with s='KYjBc SgkXrFIDq  MYv XAEzh RX f...IYb u oZ OMw YjaqzJ  BJGjfOc  s', expected='S  bjgJFoC  yJAQZj omW Oz U VxI...f rx xaeZH myV  sGKxRfidQ kyJbC'].

        Given a string, return a new string that has
        transformed based on the input:

        1. Change case of every character, ie. lower
        case to upper case, upper case to lower case.

        2. Reverse the order of words from the input.
        :return:
        ","0","Testing string_transformer function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing valid_parentheses with various test data [with test_input=')(()))', expected=False].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'shortest_job_first' function with various test data [with n=([100], 0), expected=100].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing fix_the_meerkat function with various test data [with arr=['tails', 'body', 'heads'], expected=['heads', 'body', 'tails']].

        You will be given an array which will have
        three values (tail, body, head).
        It is your job to re-arrange the array so
        that the animal is the right way round
        (head, body, tail).
        :return:
        ","0","fix_the_meerkat function function verification","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing ips_between function [with start='180.0.0.0', end='181.0.0.0', expected=16777216].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_5_180_0_0_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'check_root' function with various test inputs [with string='3,s,5,6', expected='incorrect input'].

        A function which takes numbers separated by commas
        in string format and returns the number which is a
        perfect square and the square root of that number.

        If string contains other characters than number, or
        it has more or less than 4 numbers separated by comma
        function returns 'incorrect input'.

        If string contains 4 numbers but not consecutive it
        returns 'not consecutive'.
        :return:
        ","0","Testing check_root function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing a function named agents_cleanup [with agents={(1, 5), (5, 1), (0, 0)}, n=6, expected={(1, 5), (5, 1), (0, 0)}].

        agents: is an array of agent coordinates
        n: defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should remove all agents that are outside
        the city boundaries.
        :return:
        ","0","Testing agents_cleanup function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing password function with various test inputs [with string='Abcd1234', expected=True].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing smallest function with various test data [with n=113343536213382181, expected=[111334353621338218, 17, 0]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_12","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Test 'middle_point' function with various test data [with coords=(1, 0, 4, 5, 0, 6, -7, 0, 0), expected=1, err='Wrong point!'].

        :param coords:
        :param expected:
        :param err:
        :return:
        ","0","Testing 'middle_point' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing check_for_factor function [with base=2453, factor=5, expected=False].

        This function should test if the
        factor is a factor of base.

        Return false if it is not a factor.
        :return:
        ","0","Testing check_for_factor function: positive flow","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"dir_reduc function test suite [with test_array=['EAST', 'NORTH', 'SOUTH', 'NORT...WEST', 'EAST', 'SOUTH', 'SOUTH'], expected=['EAST', 'SOUTH', 'SOUTH', 'SOUT...ORTH', 'WEST', 'SOUTH', 'SOUTH']].

        Test a function dir_reduc which will take an array of
        strings and returns an array of strings with the needless
        directions removed (W<->E or S<->N side by side).

        The Haskell version takes a list of directions with
        data Direction = North | East | West | South.

        The Clojure version returns nil when the path is
        reduced to nothing.

        The Rust version takes a slice of enum Direction
        {NORTH, SOUTH, EAST, WEST}.
        :return:
        ","0","Testing dir_reduc function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='50.0.0.0', end='50.1.1.1', expected=65793].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_4_50_0_0_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'group_cities' function with various test data [with seq=[], expected=[]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","2","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing is_prime function with various test data [with number=4539131, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","16","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing is_prime function with various test data [with number=19, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_line function with various test data [with n=17, expected=2333606220].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Test non-consecutive is a negative number.

        :return:
        ","0","Negative non consecutive number should be returned","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing smallest function with various test data [with n=285365, expected=[238565, 3, 1]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_02","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'checkchoose' function with various test data [with m=1, n=6, expected=0].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='(}', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing anagrams function with various test data [with string='abba', array=['aabb', 'abcd', 'bbaa', 'dada'], expected=['aabb', 'bbaa']].

        Test a function that will find all the anagrams of a word from a list.
        You will be given two inputs a word and an array with words. You should
        return an array of all the anagrams or an empty array if there are none.
        :return:
        ","0","Testing anagrams function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing men_from_boys function with various test inputs [with arr=[2, -43, 95, -90, 37], expected=[-90, 2, 95, 37, -43]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing done_or_not function [with board=[[1, 3, 2, 5, 7, 9, 4, 6, 8], [4...4], [8, 7, 9, 6, 4, 2, 1, 5, 3]], expected='Finished!'].

        Testing a function done_or_not/DoneOrNot passing a board
        (list[list_lines]) as parameter. If the board is valid return
        'Finished!', otherwise return 'Try again!'
        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        26 is not a square number.

        :return:
        ","8","Non square numbers (negative)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"
        If there are no good ideas, as is often the case, return 'Fail!'.

        :return:
        ","0","Should return 'Fail!'s","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing odd_row function with various test data [with n=19, expected=[343, 345, 347, 349, 351, 353, 3...7, 369, 371, 373, 375, 377, 379]].

        :return:
        ","15","Testing odd_row function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Performance","",""
"Testing duplicate_encode function with various test inputs [with string='(( @', expected='))(('].

        :return:
        ","0","Testing duplicate_encode function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing valid_parentheses with various test data [with test_input=')test', expected=False].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='10.0.0.0', end='10.0.0.50', expected=50].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_0_10_0_0_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing stock_list function with various test data [with list_of_art=['CBART 20', 'CDXEF 50', 'BKWRK 25', 'BTSQZ 89', 'DRTYM 60'], list_of_cat=['A', 'B', 'C', 'W'], expected='(A : 0) - (B : 114) - (C : 70) - (W : 0)'].

        :return:
        ","0","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing two_decimal_places function with various test inputs [with number=-7488.83485834983, expected=-7488.83, msg=""didn't work for -7488.83485834983""].

        Each floating-point number should be
        formatted that only the first two
        decimal places are returned.

        You don't need to check whether the input
        is a valid number because only valid numbers
        are used in the tests.

        Don't round the numbers! Just cut them
        after two decimal places!
        :return:
        ","0","Testing two_decimal_places function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing 'sum_pairs' function [with ints=[1, 2, 3, 4, 1, 0], s=2, expected=[1, 1], message='should return [1, 1] for sum = 2'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'sum_triangular_numbers' function with positive numbers.

        :return:
        ","0","Testing 'sum_triangular_numbers' with positive numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"A function f(n), should return the n-th member of sequence [with n=1233, expected=62047].

        :return:
        ","0","test_sequence_0","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'mix' function.

        Given two strings s1 and s2, the 'mix' function
        should visualize how different the two strings are.
        ","16","Testing 'mix' function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Fundamentals","",""
"Testing litres function with various test inputs [with hours=2, expected=1, message='should return 1 litre'].

        :return:
        ","0","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'check_root' function with various test inputs [with string='11,13,14,15', expected='not consecutive'].

        A function which takes numbers separated by commas
        in string format and returns the number which is a
        perfect square and the square root of that number.

        If string contains other characters than number, or
        it has more or less than 4 numbers separated by comma
        function returns 'incorrect input'.

        If string contains 4 numbers but not consecutive it
        returns 'not consecutive'.
        :return:
        ","0","Testing check_root function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Testing 'letter_count' function.

        :return:
        ","0","Testing 'letter_count' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Data Structures","",""
"Testing the 'valid_braces' function with various test data [with string='{}()[]', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing zeros function with various test data [with number=6, expected=1, message='Testing with n = 6'].

        Testing 'zeros' program that should calculate the number
        of trailing zeros in a factorial of a given number.
        :return: None
        ","16","Testing zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing array_diff function [with a=[1, 2, 2], b=[2], expected=[1], message='a was [1,2,2], b was [2], expected [1]'].

        :return:
        ","0","Testing array_diff function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'group_cities' function with various test data [with seq=['Rome', 'Rome', 'Rome', 'Donlon', 'London'], expected=[['Donlon', 'London'], ['Rome']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Testing Battleship field validator.

        Testing a method that takes a field for well-known board game ""Battleship""
        as an argument and returns true if it has a valid disposition of ships,
        false otherwise. Argument is guaranteed to be 10*10 two-dimension array.
        Elements in the array are numbers, 0 if the cell is free and 1 if occupied
        by ship.
        ","5","Testing validate_battlefield function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"A function f(n), should return the n-th member of sequence [with n=0, expected=0].

        :return:
        ","0","test_sequence_1","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named create_city_map [with n=3, expected={(0, 1), (1, 2), (2, 1), (0, 0),... (2, 0), (0, 2), (2, 2), (1, 0)}].

        n defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should generate city map with coordinates.
        :return:
        ","3","Testing create_city_map function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'count_sheep' function, empty list.

        Hint: Don't forget to check for
        bad values like empty list
        :return:
        ","0","Testing 'count_sheep' function: empty list","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'solution' function with various test data [with value=5, expected='Value is 00005'].

        The function should return a formatted string.
        The return value should equal ""Value is VALUE""
        where value is a 5 digit padded number.
        :return:
        ","2","Testing 'solution' function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing alphabet_war function [with battlefield='[a]#b#[c][d]', expected='d'].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'has_subpattern' function with various test data [with string='aaaa', expected=True].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing 'is_isogram' function [with string='isogram', expected=True, message=''].

        :return:
        ","0","Testing 'is_isogram' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        Test 'remove_char' function.

        Should remove the first and last characters of a string.
        :return:
        ","0","Testing remove_char function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Testing hoop_count function (positive).

        Alex just got a new hula-hoop, he loves it but feels
        discouraged because his little brother is better than him

        Write a program where Alex can input (n) how many times
        the hoop goes round and it will return him an encouraging message

        - 10 or more hoops, return ""Great, now move on to tricks"".
        - Not 10 hoops, return ""Keep at it until you get it"".

        :return:
        ","0","Testing hoop_count function (positive test case)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"dir_reduc function test suite [with test_array=['NORTH', 'SOUTH', 'SOUTH', 'EAST', 'WEST', 'NORTH', 'WEST'], expected=['WEST']].

        Test a function dir_reduc which will take an array of
        strings and returns an array of strings with the needless
        directions removed (W<->E or S<->N side by side).

        The Haskell version takes a list of directions with
        data Direction = North | East | West | South.

        The Clojure version returns nil when the path is
        reduced to nothing.

        The Rust version takes a slice of enum Direction
        {NORTH, SOUTH, EAST, WEST}.
        :return:
        ","0","Testing dir_reduc function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing first_non_repeated function with various test data [with s='knioolrpnutskmqmhqtriipjjushl', expected=None].

        :return:
        ","0","Testing first_non_repeated function with various inputs","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Test powers function with various test data [with message='Pass n = 6 and verify the output', number=6, expected=[2, 4]].

        :return:
        ","2","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'calculate' function with various test data [with s='1plus2minus3plus4minus5', expected='-1'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing the 'valid_braces' function with various test data [with string='()', expected=True].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('orange', 'apple'), ('orange', 'pear'), ('pear', 'apple')], harvested_fruit='apple', expected=['sell', 'buy', 'buy']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing Battle method with various test data.

        :return:
        ","0","Testing Battle method","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","OOP","",""
"Testing using medium test data [with num=9001, expected=[[4501, 2250]]].

        :return:
        ","0","test_solution_medium_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Basic test case [with string='RBRGBRB', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing is_prime function with various test data [with number=110268984695, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'DefaultList' class: append.

        :return:
        ","0","Testing 'DefaultList' class: append","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"Testing 'string_to_math' function with various test data [with s='1plus2plus3plus4', expected='1+2+3+4'].

        :return:
        ","0","Testing 'string_to_math' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing list_squared function [with m=250, n=500, expected=[[287, 84100]]].

        :return:
        ","2","Testing list_squared function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing calculate function with various test data [with s='1plus2plus3minus4', expected='2'].

        :return:
        ","1","Testing calculate function","Beginner","Thu Dec 26 08:33:55 PST 2024","passed","Thu Dec 26 08:33:55 PST 2024","Unit Tests","Fundamentals","",""
"Testing using medium test data [with num=9009, expected=[[4505, 2252], [1503, 750], [647...], [103, 20], [97, 10], [95, 2]]].

        :return:
        ","0","test_solution_medium_3","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing encrypt_this function [with text='hello world', expected='104olle 119drlo'].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing a function named first_non_repeating_letter [with string='abba', expected=''].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","0","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'save' function: positive [with sizes=[1, 2, 3, 4], hd=250, expected=4].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: positive","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"A function f(n), should return the n-th member of sequence [with n=3, expected=4].

        :return:
        ","0","test_sequence_4","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Test 'middle_point' function with various test data [with coords=(1, 2, 3, 4, 5, 6, 7, 8, 9), expected=2, err='Wrong point!'].

        :param coords:
        :param expected:
        :param err:
        :return:
        ","0","Testing 'middle_point' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'solve' function with various test data [with arr=[1, 23, 2], expected=3].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing ips_between function [with start='117.170.96.190', end='117.172.196.242', expected=156724].

        Testing a function that receives two IPv4 addresses,
        and returns the number of addresses between them
        (including the first one, excluding the last one).

        All inputs will be valid IPv4 addresses in the form
        of strings. The last address will always be greater
        than the first one.
        :return:
        ","0","test_ips_between_8_117_170_96_190","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'parts_sums' function with various test data [with input_ls=[744125, 935, 407, 454, 430, 90,...144, 6710213, 889, 810, 2579358], expected=[10037855, 9293730, 9292795, 929...0, 2581057, 2580168, 2579358, 0]].

        :return:
        ","0","Testing 'parts_sums' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'solve' function with various test data [with arr=[7, 4, 10], expected=10].

        :return:
        ","0","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing a function named first_non_repeating_letter [with string='hello world, eh?', expected='w'].

        The function takes a string input, and returns the first character
        that is not repeated anywhere in the string.

        For example, if given the input 'stress', the function
        should return 't', since the letter t only occurs once
        in the string, and occurs first in the string.

        As an added challenge, upper- and lowercase letters are
        considered the same character, but the function should
        return the correct case for the initial letter. For example,
        the input 'sTreSS' should return 'T'.

        If a string contains all repeating characters, it should
        return an empty string ("""") or None -- see sample tests.
        :return:
        ","2","Testing first_non_repeating_letter function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_line function with various test data [with n=1, expected=2].

        :return:
        ","0","Testing easy_line function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing encrypt_this function [with text='', expected=''].

        :param self:
        :return:
        ","0","Testing encrypt_this function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"In this kata, you must create a digital root function [with n=456, expected=6].

        A digital root is the recursive sum of all the digits
        in a number. Given n, take the sum of the digits of n.
        If that value has more than one digit, continue reducing
        in this way until a single-digit number is produced. This
        is only applicable to the natural numbers.
        :return:
        ","0","Testing digital_root function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'move' function with various test data.

        :return:
        ","1","move function tests","Beginner","Thu Dec 26 08:33:56 PST 2024","passed","Thu Dec 26 08:33:56 PST 2024","Unit Tests","Math","",""
"Testing men_from_boys function with various test inputs [with arr=[49, 818, -282, 900, 928, 281, -282, -1], expected=[-282, 818, 900, 928, 281, 49, -1]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing permutations function.

        Test that permutations function creates all
        permutations of an input string and
        remove duplicates, if present. This means, you
        have to shuffle all letters from the input in all
        possible orders.
        :return:
        ","0","test_permutations","Competent","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing smallest function with various test data [with n=261235, expected=[126235, 2, 0]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_00","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"
        Verify that 'has_subpattern' function.

        Return a subpattern with sorted characters,
        otherwise return the base string with sorted
        characters (you might consider this case as
        an edge case, with the subpattern being repeated
        only once and thus equalling the original input string).
        :return:
        ","0","Testing 'has_subpattern' (part 3) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing check_exam function with various test data [with arr1=['a', 'a', 'c', 'b'], arr2=['a', 'a', 'b', ''], expected=7].

        The function should return the score for this
        array of answers, giving +4 for each correct answer,
        -1 for each incorrect answer, and +0 for each blank
        answer(empty string).
        :return:
        ","0","Testing check_exam function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing set_alarm function with various test inputs [with test_input=(True, False), expected=True, msg='Fails when input is True, False'].

        The function should return true if you are employed
        and not on vacation (because these are the circumstances
        under which you need to set an alarm). It should return
        false otherwise.

        Examples:
        setAlarm(true, true) -> false
        setAlarm(false, true) -> false
        setAlarm(false, false) -> false
        setAlarm(true, false) -> true
        :return:
        ","0","Testing set_alarm function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing smallest function with various test data [with n=71269954474326234, expected=[12679954474326234, 0, 3]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_09","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing alphabet_war function [with battlefield='##abcde[fgh]', expected=''].

        Introduction
        There is a war and nobody knows - the alphabet war!
        The letters hide in their nuclear shelters. The
        nuclear strikes hit the battlefield and killed a
        lot of them.

        Task
        Write a function that accepts battlefield string
        and returns letters that survived the nuclear strike.

        1. The battlefield string consists of only small letters, #,[ and ].

        2. The nuclear shelter is represented by square brackets [].
        The letters inside the square brackets represent letters
        inside the shelter.

        3. The # means a place where nuclear strike hit the battlefield.
        If there is at least one # on the battlefield, all letters outside
        of shelter die. When there is no any # on the battlefield, all letters
        survive (but do not expect such scenario too often ;-P ).

        4. The shelters have some durability. When 2 or more # hit close to
        the shelter, the shelter is destroyed and all letters inside evaporate.
        The 'close to the shelter' means on the ground between the shelter and
        the next shelter (or beginning/end of battlefield). The below samples
        make it clear for you.
        :return:
        ","0","Testing alphabet_war function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing calc_combinations_per_row function [with n=7, i=6, expected=7].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=1, inp='0.1'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing using basic test data [with num=5, expected=[[3, 1]]].

        :return:
        ","0","test_solution_basic_0","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing the 'valid_braces' function with various test data [with string='(((({{', expected=False].

        :return:
        ","0","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'save' function: negative [with sizes=[45], hd=12, expected=0].

        The function should determine how many
        files of the copy queue you will be able
        to save into your Hard Disk Drive.
        :return:
        ","0","Testing 'save' function: negative","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing list_squared function [with m=689, n=5666, expected=[[728, 722500], [1434, 2856100],...880, 4884100], [4264, 24304900]]].

        :return:
        ","40","Testing list_squared function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing is_prime function with various test data [with number=17, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing easy_diagonal function [with n=20, p=15, expected=20349].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing list_squared function [with m=42, n=250, expected=[[42, 2500], [246, 84100]]].

        :return:
        ","2","Testing list_squared function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'elevator' function with various test data [with elevators=(0, 1, 0), expected='left'].

        :return:
        ","3","Testing elevator function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing likes function with various test data [with names=['Max', 'John', 'Mark'], expected='Max, John and Mark like this'].

        :return:
        ","0","Testing likes function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"A function f(n), should return the n-th member of sequence [with n=6457, expected=715501].

        :return:
        ","0","test_sequence_9","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Negative test cases for is_prime function testing
        :return:
        ","0","Negative test cases for is_prime function testing","Helper methods","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","No kyu helper methods","",""
"Basic test case for pattern func [with n=0, expected=''].

        :return:
        ","0","Basic test case for pattern func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing growing_plant function [with input_data=(5, 2, 5), expected=1].

        :return:
        ","0","Testing growing_plant function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Test 'is_loch_ness_monster' function with various test data [with string='', expected=False].

        :return:
        ","0","Testing 'is_loch_ness_monster' function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'is_isogram' function [with string='moOse', expected=False, message='same chars may not be same case'].

        :return:
        ","0","Testing 'is_isogram' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Basic test case [with string='RRBRBRBBBBBRBRRBBBGBBGBGGGRGR', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing the 'valid_braces' function with various test data [with string='())({}}{()][][', expected=False].

        :return:
        ","10","Testing the 'valid_braces' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing men_from_boys function with various test inputs [with arr=[-53, -26, -53, -27, -49, -51, -14], expected=[-26, -14, -27, -49, -51, -53]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing a function named increment_string [with string='foobar99', expected='foobar100'].

        :return:
        ","14","Testing increment_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Sample testing [with lst=[14, 2, -3, -12, -17, 14, 2, 2, ..., -17, -12, -17, -1, 14, -12, 2], expected=2, msg='Random tests'].

        :return:
        ","0","Find the int that appears an odd number of times","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Data Structures","",""
"0 is a square number [with test_str=')()'].

        :return:
        ","0","Simple test for invalid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing epidemic function [with etd=tm: 24, n: 576, s0: 982, i0: 1, ... 0.00214, a: 0.44, expected: 460].

        :return:
        ","0","Testing epidemic function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('apple', 'orange'), ('orange', 'pear'), ('pear', 'apple')], harvested_fruit='apple', expected=['buy', 'buy', 'buy']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing share_price function with multiple test inputs [with invested=100, changes=[-20, 30], expected='104.00'].

        :return:
        ","0","Testing share_price function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing is_prime function with various test data [with number=53, expected=True].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","0","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'has_subpattern' function with various test data [with string='12aa13a21233A', expected=False].

        Verify that 'has_subpattern' function to returns
        either true/True or false/False if a string can be
        seen as the repetition of a simpler/shorter subpattern or not.

        1. if a subpattern has been used, it will be repeated
        at least twice, meaning the subpattern has to be
        shorter than the original string;

        2. the strings you will be given might or might not
        be created repeating a given subpattern, then
        shuffling the result.
        :return:
        ","0","Testing 'has_subpattern' (part 2) function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing make_readable function [with seconds=5, expected='00:00:05'].

        Write a function, which takes a non-negative integer
        (seconds) as input and returns the time in a human-readable
        format (HH:MM:SS)

        HH = hours, padded to 2 digits, range: 00 - 99
        MM = minutes, padded to 2 digits, range: 00 - 59
        SS = seconds, padded to 2 digits, range: 00 - 59

        The maximum time never exceeds 359999 (99:59:59)
        :return:
        ","0","Testing make_readable function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing other_angle function with various test data [with a=43, b=78, expected=59].

        :return:
        ","0","You are given two angles -> find the 3rd.","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing max_multiple function with various test data [with divisor=37, bound=100, expected=74].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'checkchoose' function with various test data [with m=4, n=4, expected=1].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=1, inp='3000'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing compute_ranks function [with number=6, games=[[0, 5, 2, 0], [1, 4, 2, 2], [2,... 0], [2, 0, 2, 1], [3, 4, 3, 1]], expected=[2, 3, 4, 1, 5, 6]].

        Test the compute_ranks function that organizes a sports
        league in a round-robin-system. Each team meets all other teams.
        In your league a win gives a team 2 points, a draw gives
        both teams 1 point. After some games you have to compute
        the order of the teams in your league. You use the following
        criteria to arrange the teams:
        1. Points.
        2. Scoring differential (the difference between goals
        scored and those conceded).
        3. Goals scored.
        :return:
        ","0","Testing compute_ranks","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'group_cities' function with various test data [with seq=['Abaa', 'Bc', 'Ca', 'Bbcac', 'C..., 'A', 'C', 'Cba', 'Baa', 'Abc'], expected=[['Abc', 'Cab'], ['A'], ['Abaa']...], ['Caca'], ['Cba'], ['Cbbcc']]].

        Make sure that a function that given a sequence of strings,
        groups the elements that can be obtained by rotating others,
        ignoring upper or lower cases.

        In the event that an element appears more than once in
        the input sequence, only one of them will be taken into
        account for the result, discarding the rest.
        :return:
        ","0","Testing the 'group_cities' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Test powers function with various test data [with message='Pass n = 14 and verify the output', number=14, expected=[2, 4, 8]].

        :return:
        ","0","'powers' function should return an array of unique numbers","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing fix_the_meerkat function with various test data [with arr=['lower legs', 'torso', 'upper legs'], expected=['upper legs', 'torso', 'lower legs']].

        You will be given an array which will have
        three values (tail, body, head).
        It is your job to re-arrange the array so
        that the animal is the right way round
        (head, body, tail).
        :return:
        ","0","fix_the_meerkat function function verification","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing 'calculate' function with various test data [with s='-1plus5minus2', expected='2'].

        :return:
        ","0","Testing calculate function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"
        3 is not a square number.

        :return:
        ","0","Non square numbers (negative)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Math","",""
"Testing tickets function with various test inputs [with arr=[25, 25, 50, 50, 100], expected='NO', msg=""Vasya will not have the right b...two bills of 25 from one of 50)""].

        The new ""Avengers"" movie has just been released!
        There are a lot of people at the cinema box office
        standing in a huge line. Each of them has a single
        100, 50 or 25 dollar bill. An ""Avengers"" ticket
        costs 25 dollars.

        Vasya is currently working as a clerk.
        He wants to sell a ticket to every single person
        in this line.

        Can Vasya sell a ticket to every person and give change
        if he initially has no money and sells the tickets strictly
        in the order people queue?

        The function should return YES, if Vasya can sell
        a ticket to every person and give change with the
        bills he has at hand at that moment. Otherwise return NO.
        :return:
        ","0","Testing tickets function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Basic test case [with string='BBRRBRGBRRBRGRRBGGRRBBGBGGRGGB', expected='G'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"Testing men_from_boys function with various test inputs [with arr=[-32, -39, -35, -41], expected=[-32, -35, -39, -41]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","10","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing to_table with various test data.

        :return:
        ","0","Testing to_table function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing password function with various test inputs [with string='!@#$%^&*()-_+={}[]|\\:;?/>.<,', expected=False].

        :return:
        ","0","Testing password function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing 'DefaultList' class: pop.

        Tests regular pop operations and edge case of popping from empty list.
        :return:
        ","0","Testing 'DefaultList' class: edge cases for pop","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"
        Testing make_class function.

        :return:
        ","0","Testing make_class function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","OOP","",""
"Testing 'solve' function with various test data [with arr=[8, 2, 8], expected=9].

        :return:
        ","2","Testing solve function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing 'DefaultList' class: remove.

        :return:
        ","0","Testing 'DefaultList' class: remove","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Object-Oriented Programming","",""
"Testing invite_more_women function (positive) [with arr=[-1, -1, -1], expected=False].

        :return:
        ","0","Testing invite_more_women function (positive)","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing josephus_survivor function with various test data [with test_data=(100, 1), expected=100].

        In this kata you have to correctly return who
        is the ""survivor"", ie: the last element of a
        Josephus permutation.
        :return:
        ","0","test_josephus_survivor_4","Novice","Wed Jan 01 04:49:32 PST 2025","skipped","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Basic test case for pattern func [with n=-25, expected=''].

        :return:
        ","0","Basic test case for pattern func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing 'number_of_sigfigs' function with various test inputs [with exp=10, inp='0000.0673560000'].

        :return:
        ","0","Testing number_of_sigfigs function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing calc_combinations_per_row function [with n=1, i=1, expected=1].

        :return:
        ","0","Testing calc_combinations_per_row function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"0 is a square number [with test_str=')('].

        :return:
        ","0","Simple test for invalid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing 'shortest_job_first' function with various test data [with n=([3, 10, 10, 20, 1, 2], 1), expected=16].

        :return:
        ","0","Testing 'shortest_job_first(' function","Novice","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing century function with various test data [with year=89, expected=1, message='Testing for year 89'].

        :return:
        ","0","Testing century function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Numbers","",""
"Testing monkey_count function [with n=9, expected=[1, 2, 3, 4, 5, 6, 7, 8, 9]].

        You take your son to the forest to see the monkeys.
        You know that there are a certain number there (n),
        but your son is too young to just appreciate the full
        number, he has to start counting them from 1.

        As a good parent, you will sit and count with him.
        Given the number (n), populate an array with all
        numbers up to and including that number, but excluding
        zero.
        :return:
        ","0","Testing monkey_count function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"
        Testing ValueError for logical_calc function.

        :return:
        ","0","Testing ValueError for logical_calc function.","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"Testing is_prime function with various test data [with number=1, expected=False].

        Testing a function that checks if a given number n is a prime
        looping through it and, possibly, expanding the array/list of
        known primes only if/when necessary (ie: as soon as you check
        for a potential prime which is greater than a given threshold
        for each n, stop).

        :return:
        ","15","Testing is_prime function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing men_from_boys function with various test inputs [with arr=[-64, -71, -63, -66, -65], expected=[-66, -64, -63, -65, -71]].

        Scenario
        Now that the competition gets tough it
        will Sort out the men from the boys .

        Men are the Even numbers and Boys are
        the odd !alt !alt

        Task
        Given an array/list [] of n integers ,
        Separate The even numbers from the odds ,
        or Separate the men from the boys !alt !alt

        Notes
        Return an array/list where Even numbers
        come first then odds.
        Since , Men are stronger than Boys ,
        Then Even numbers in ascending order
        While odds in descending.
        :return:
        ","0","Testing men_from_boys function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing two_decimal_places function with various test inputs [with n=173735326.37837327, expected=173735326.38, msg=""didn't work for 173735326.3783732637948948""].

        Each number should be formatted that it is
        rounded to two decimal places. You don't
        need to check whether the input is a valid
        number because only valid numbers are used
        in the tests.
        :return:
        ","0","Testing two_decimal_places function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing move_zeros function with various test data [with array=['a'], expected=['a']].

        Test an algorithm that takes an array and moves all of the
        zeros to the end, preserving the order of the other elements.
        :return:
        ","0","Testing move_zeros function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing valid_parentheses with various test data [with test_input='  (', expected=False].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","0","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing valid_parentheses with various test data [with test_input='(())((()())())', expected=True].

        Test the valid_parentheses function that takes a string
        of parentheses, and determines if the order of the
        parentheses is valid. The function should return true
        if the string is valid, and false if it's invalid.
        :return:
        ","5","Testing valid_parentheses function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'disemvowel' function with various test data [with input_data=""No offense but, Your writing is among the worst I've ever read"", expected=""N ffns bt, Yr wrtng s mng th wrst 'v vr rd""].

        The string ""This website is for losers LOL!""
        should become ""Ths wbst s fr lsrs LL!"".
        :return:
        ","0","a and b are equal","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing to_alternating_case function with various test data [with string='String.prototype.toAlternatingCase', expected='sTRING.PROTOTYPE.TOaLTERNATINGcASE'].

        :return:
        ","0","Testing to_alternating_case function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing 'sum_pairs' function [with ints=[10, 5, 2, 3, 7, 5], s=10, expected=[3, 7], message='should return [3, 7] for sum = 10'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"A function f(n), should return the n-th member of sequence [with n=4, expected=9].

        :return:
        ","0","test_sequence_5","Novice","Wed Jan 01 04:49:33 PST 2025","skipped","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing is_palindrome function with various test inputs [with string='kodok', expected=True].

        The function should check if a
        given string (case-insensitive)
        is a palindrome.
        :return:
        ","0","Testing is_palindrome function","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Positive tests.

        :return:
        ","0","Testing period_is_late function (positive)","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Data Structures","",""
"
        Testing binary_to_string function with various test data.

        :return:
        ","4","Testing binary_to_string function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Character Encodings","",""
"Testing 'how_many_dalmatians' function with various test data [with number=8, expected='Hardly any'].

        :param number:
        :param expected:
        :return:
        ","16","Testing 'how_many_dalmatians' function.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing litres function with various test inputs [with hours=11.8, expected=5, message='should return 5 litres'].

        :return:
        ","0","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'factorial' function [with n=1, expected=1, msg='factorial for 1 is 1'].

        In mathematics, the factorial of a non-negative integer n,
        denoted by n!, is the product of all positive integers less
        than or equal to n. For example: 5! = 5 * 4 * 3 * 2 * 1 = 120.
        By convention the value of 0! is 1.

        Write a function to calculate factorial for a given input.
        If input is below 0 or above 12 throw an exception of type
        ValueError (Python).
        :return:
        ","0","Testing 'factorial' function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Algorithms","",""
"Testing 'sum_pairs' function [with ints=[1, -2, 3, 0, -6, 1], s=-6, expected=[0, -6], message='should return [0, -6] for sum = -6'].

        Given a list of integers and a single sum value,
        the function should return the first two values
        (parse from the left please) in order of appearance
        that add up to form the sum.
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing pig_it function [with text='O tempora o mores !', expected='Oay emporatay oay oresmay !'].

        The function should mpve the first letter of each
        word to the end of it, then add ""ay"" to the end
        of the word. Leave punctuation marks untouched.
        :return:
        ","0","Testing pig_it function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing 'thirt' function with various test data [with n=5634, expected=57].

        :return:
        ","0","Testing 'thirt' function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing josephus_survivor function with various test data [with test_data=(1, 300), expected=1].

        In this kata you have to correctly return who
        is the ""survivor"", ie: the last element of a
        Josephus permutation.
        :return:
        ","0","test_josephus_survivor_2","Novice","Wed Jan 01 04:49:32 PST 2025","skipped","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing smallest function with various test data [with n=352343279580894007, expected=[35234327958089407, 15, 0]].

        Test a function `smallest` which will return an array or a
        tuple or a string depending on the language (see ""Sample Tests"").
        :return:
        ","0","test_smallest_07","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Negative numbers cannot be square numbers [with test_str='((()))'].

        :return:
        ","0","Simple test for valid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing sum_for_list function.

        :return:
        ","64","Testing sum_for_list function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing 'find_missing_number' function with various test data [with numbers=[1, 2, 3], expected=4].

        Test a function that should take a shuffled list of
        unique numbers from 1 to n with one element missing
        (which can be any number including n). Should return
        this missing number.
        :return:
        ","16","Testing the 'find_missing_number' function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"
        Testing next_smaller function.

        You have to test a function that takes a positive integer number
        and returns the next smaller number formed by the same digits:

        21 ==> 12
        531 ==> 513
        2071 ==> 2017

        If no smaller number can be composed using those digits, return -1
        :return:
        ","0","Testing next_smaller function","Competent","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing calculate_damage with various test data [with test_data=('fire', 'water', 100, 100), expected=25].

        :return:
        ","16","Testing calculate_damage function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Games","",""
"Testing 'buy_or_sell' function, positive test case. [with market=[('apple', 'orange'), ('orange', 'pear'), ('apple', 'pear')], harvested_fruit='apple', expected=['buy', 'buy', 'sell']].

        :return:
        ","0","Testing 'buy_or_sell' function -> positive.","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"
        Testing permute_a_palindrome function with various test data.

        :return:
        ","0","Testing permute_a_palindrome (positive)","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Algorithms","",""
"Testing alphanumeric function with various test inputs [with password='hello _world', expected=False].

        The string has the following conditions
        to be alphanumeric only:

        1. At least one character ("""" is not valid).
        2. Allowed characters are uppercase or lowercase
           latin letters and digits from 0 to 9.
        3. No whitespaces or underscore or special chars.

        :return: None
        ","0","Testing alphanumeric function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Advanced Language Features","",""
"Basic test case [with string='RRBBRRGBRBGBRBRGBGGRBBBBRGGRGB', expected='R'].

        :return:
        ","0","Basic test case for triangle func.","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Data Structures","",""
"
        Test lists with multiple digits.

        :return:
        ","0","'multiply' function verification: lists with multiple digits","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Data Structures","",""
"Testing is_solved function with various test data [with board=[[2, 1, 2], [2, 1, 1], [1, 2, 1]], expected=0, message='draw'].

        The function should return whether the
        board's current state is solved.

        We want our function to return:

            -1 if the board is not yet finished (there are empty spots),
            1 if ""X"" won,
            2 if ""O"" won,
            0 if it's a cat's game (i.e. a draw).

        :return:
        ","0","Testing done_or_not function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"Testing compute_ranks function [with number=6, games=[[0, 5, 2, 2], [1, 4, 0, 2], [2,... 2], [3, 1, 1, 1], [4, 0, 2, 0]], expected=[4, 4, 6, 3, 1, 2]].

        Test the compute_ranks function that organizes a sports
        league in a round-robin-system. Each team meets all other teams.
        In your league a win gives a team 2 points, a draw gives
        both teams 1 point. After some games you have to compute
        the order of the teams in your league. You use the following
        criteria to arrange the teams:
        1. Points.
        2. Scoring differential (the difference between goals
        scored and those conceded).
        3. Goals scored.
        :return:
        ","5","Testing compute_ranks","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Algorithms","",""
"
        Testing a function named advice(agents, n).

        agents is an array of agent coordinates.
        n defines the size of the city that Bassi needs to hide in,
        in other words the side length of the square grid.
        The function should return a list of coordinates that are the furthest
        away (by Manhattan distance) from all agents.
        :return:
        ","17","Testing advice function","Novice","Wed Jan 01 04:49:31 PST 2025","passed","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Testing the function with various test data [with s='u_n_d_e_r__S_C_O_R_E', expected=10].

        :return:
        ","0","Testing count_letters_and_digits function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Fundamentals","",""
"Testing gap function with various test inputs [with num=9, expected=2].

        A binary gap within a positive number num is
        any sequence of consecutive zeros that is
        surrounded by ones at both ends in the binary
        representation of num.

        The gap function should return the length of
        its longest binary gap.

        The function should return 0 if num doesn't
        contain a binary gap.
        :return:
        ","0","Testing gap function","Beginner","Wed Jan 01 04:49:34 PST 2025","passed","Wed Jan 01 04:49:34 PST 2025","Unit Tests","Advanced Language Features","",""
"Testing stock_list function with various test data [with list_of_art=['BBAR 150', 'CDXE 515', 'BKWR 250', 'BTSQ 890', 'DRTY 600'], list_of_cat=['A', 'B', 'C', 'D'], expected='(A : 0) - (B : 1290) - (C : 515) - (D : 600)'].

        :return:
        ","2","Testing stock_list function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing max_multiple function with various test data [with divisor=43, bound=7, expected=0].

        :return:
        ","0","Testing max_multiple function","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
"Testing litres function with various test inputs [with hours=0.82, expected=0, message='should return 0 litres'].

        :return:
        ","0","Testing litres function with various test inputs","Beginner","Wed Jan 01 04:49:36 PST 2025","passed","Wed Jan 01 04:49:36 PST 2025","Unit Tests","Math","",""
"Testing 'checkchoose' function with various test data [with m=36, n=7, expected=-1].

        In mathematics the number of x combinations you can take from a
        set of n elements is called the binomial coefficient of n and x,
        or more often n choose x. The formula to compute m = n choose x is:
        m = n! / (x! * (n - x)!) where ! is the factorial operator.

        You are a renowned poster designer and painter. You are asked to
        provide 6 posters all having the same design each in 2 colors.
        Posters must all have a different color combination and you have
        the choice of 4 colors: red, blue, yellow, green. How many colors
        can you choose for each poster?
        :param m:
        :param n:
        :param expected:
        :return:
        ","0","Testing checkchoose function","Novice","Wed Jan 01 04:49:32 PST 2025","passed","Wed Jan 01 04:49:32 PST 2025","Unit Tests","Fundamentals","",""
"Testing easy_diagonal function [with n=20, p=3, expected=5985].

        :param self:
        :return:
        ","0","Testing easy_diagonal function","Novice","Wed Jan 01 04:49:33 PST 2025","passed","Wed Jan 01 04:49:33 PST 2025","Unit Tests","Fundamentals","",""
"Testing using big test data [with num=90009, expected=[[45005, 22502], [15003, 7500], ...53, 290], [397, 130], [315, 48]]].

        :return:
        ","0","test_solution_big_3","Novice","Wed Jan 01 04:49:31 PST 2025","skipped","Wed Jan 01 04:49:31 PST 2025","Unit Tests","Algorithms","",""
"Negative numbers cannot be square numbers [with test_str='()()()'].

        :return:
        ","0","Simple test for valid parentheses","Beginner","Wed Jan 01 04:49:35 PST 2025","passed","Wed Jan 01 04:49:35 PST 2025","Unit Tests","Algorithms","",""
