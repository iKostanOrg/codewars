
 Sudoku:
# 1
# 2
[7, 8, 4, 1, 5, 9, 3, 2, 6]
[5, 3, 9, 6, 7, 2, 8, 4, 1]
[6, 1, 2, 4, 3, 8, 7, 5, 9]
[9, 2, 8, 7, 1, 5, 4, 6, 3]
[3, 5, 7, 8, 4, 6, 1, 9, 2]
[4, 6, 1, 9, 2, 3, 5, 8, 7]
[8, 7, 6, 3, 9, 4, 2, 1, 5]
[2, 4, 3, 5, 6, 1, 9, 7, 8]
[1, 9, 5, 2, 8, 7, 6, 3, 4]
# 3
# 4
Step: 3

a: 0, start: 0, end: 3
a: 1, start: 0, end: 3
a: 2, start: 0, end: 3
[7, 8, 4, 5, 3, 9, 6, 1, 2]
a: 3, start: 0, end: 3
a: 4, start: 0, end: 3
a: 5, start: 0, end: 3
[9, 2, 8, 3, 5, 7, 4, 6, 1]
a: 6, start: 0, end: 3
a: 7, start: 0, end: 3
a: 8, start: 0, end: 3
[8, 7, 6, 2, 4, 3, 1, 9, 5]

a: 0, start: 3, end: 6
a: 1, start: 3, end: 6
a: 2, start: 3, end: 6
[1, 5, 9, 6, 7, 2, 4, 3, 8]
a: 3, start: 3, end: 6
a: 4, start: 3, end: 6
a: 5, start: 3, end: 6
[7, 1, 5, 8, 4, 6, 9, 2, 3]
a: 6, start: 3, end: 6
a: 7, start: 3, end: 6
a: 8, start: 3, end: 6
[3, 9, 4, 5, 6, 1, 2, 8, 7]

a: 0, start: 6, end: 9
a: 1, start: 6, end: 9
a: 2, start: 6, end: 9
[3, 2, 6, 8, 4, 1, 7, 5, 9]
a: 3, start: 6, end: 9
a: 4, start: 6, end: 9
a: 5, start: 6, end: 9
[4, 6, 3, 1, 9, 2, 5, 8, 7]
a: 6, start: 6, end: 9
a: 7, start: 6, end: 9
a: 8, start: 6, end: 9
[2, 1, 5, 9, 7, 8, 6, 3, 4]

LOG =>
expected: True,
actual_result: True,
message: Testing valid 9x9


 Sudoku:
# 1
# 2
[1, 4, 2, 3]
[3, 2, 4, 1]
[4, 1, 3, 2]
[2, 3, 1, 4]
# 3
# 4
Step: 2

a: 0, start: 0, end: 2
a: 1, start: 0, end: 2
[1, 4, 3, 2]
a: 2, start: 0, end: 2
a: 3, start: 0, end: 2
[4, 1, 2, 3]

a: 0, start: 2, end: 4
a: 1, start: 2, end: 4
[2, 3, 4, 1]
a: 2, start: 2, end: 4
a: 3, start: 2, end: 4
[3, 2, 1, 4]

LOG =>
expected: True,
actual_result: True,
message: Testing valid 4x4


 Sudoku:
# 1
# 2
[0, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
# 3
assert_sudoku_by_column

LOG =>
expected: False,
actual_result: False,
message: Values in wrong order


 Sudoku:
# 1
# 2
[1, 2, 3, 4, 5]
[1, 2, 3, 4]
assert_sudoku_by_row #1

LOG =>
expected: False,
actual_result: False,
message: 4x5 (invalid dimension)


 Sudoku:
# 1
# 2
[7, 8, 4, 1, 5, 9, 3, 2, 6]
[5, 3, 9, 6, 7, 2, 8, 4, 1]
[6, 1, 2, 4, 3, 8, 7, 5, 9]
[9, 2, 8, 7, 1, 5, 4, 6, 3]
[3, 5, 7, 8, 4, 6, 1, 9, 2]
[4, 6, 1, 9, 2, 3, 5, 8, 7]
[8, 7, 6, 3, 9, 4, 2, 1, 5]
[2, 4, 3, 5, 6, 1, 9, 7, 8]
[1, 9, 5, 2, 8, 7, 6, 3, 4]
# 3
# 4
Step: 3

a: 0, start: 0, end: 3
a: 1, start: 0, end: 3
a: 2, start: 0, end: 3
[7, 8, 4, 5, 3, 9, 6, 1, 2]
a: 3, start: 0, end: 3
a: 4, start: 0, end: 3
a: 5, start: 0, end: 3
[9, 2, 8, 3, 5, 7, 4, 6, 1]
a: 6, start: 0, end: 3
a: 7, start: 0, end: 3
a: 8, start: 0, end: 3
[8, 7, 6, 2, 4, 3, 1, 9, 5]

a: 0, start: 3, end: 6
a: 1, start: 3, end: 6
a: 2, start: 3, end: 6
[1, 5, 9, 6, 7, 2, 4, 3, 8]
a: 3, start: 3, end: 6
a: 4, start: 3, end: 6
a: 5, start: 3, end: 6
[7, 1, 5, 8, 4, 6, 9, 2, 3]
a: 6, start: 3, end: 6
a: 7, start: 3, end: 6
a: 8, start: 3, end: 6
[3, 9, 4, 5, 6, 1, 2, 8, 7]

a: 0, start: 6, end: 9
a: 1, start: 6, end: 9
a: 2, start: 6, end: 9
[3, 2, 6, 8, 4, 1, 7, 5, 9]
a: 3, start: 6, end: 9
a: 4, start: 6, end: 9
a: 5, start: 6, end: 9
[4, 6, 3, 1, 9, 2, 5, 8, 7]
a: 6, start: 6, end: 9
a: 7, start: 6, end: 9
a: 8, start: 6, end: 9
[2, 1, 5, 9, 7, 8, 6, 3, 4]

LOG =>
expected: True,
actual_result: True,
message: Testing valid 9x9


 Sudoku:
# 1
# 2
[1, 4, 2, 3]
[3, 2, 4, 1]
[4, 1, 3, 2]
[2, 3, 1, 4]
# 3
# 4
Step: 2

a: 0, start: 0, end: 2
a: 1, start: 0, end: 2
[1, 4, 3, 2]
a: 2, start: 0, end: 2
a: 3, start: 0, end: 2
[4, 1, 2, 3]

a: 0, start: 2, end: 4
a: 1, start: 2, end: 4
[2, 3, 4, 1]
a: 2, start: 2, end: 4
a: 3, start: 2, end: 4
[3, 2, 1, 4]

LOG =>
expected: True,
actual_result: True,
message: Testing valid 4x4


 Sudoku:
# 1
# 2
[1]
# 3
# 4

LOG =>
expected: True,
actual_result: True,
message: Testing valid 1x1


 Sudoku:
# 1
# 2
[0, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
# 3
assert_sudoku_by_column

LOG =>
expected: False,
actual_result: False,
message: Values in wrong order


 Sudoku:
# 1
# 2
[1, 2, 3, 4, 5]
[1, 2, 3, 4]
assert_sudoku_by_row #1

LOG =>
expected: False,
actual_result: False,
message: 4x5 (invalid dimension)


 Sudoku:
# 1
__is_data_valid #2

LOG =>
expected: False,
actual_result: False,
message: 1x1 with wrong value


 Sudoku:
# 1
__is_data_valid #2

LOG =>
expected: False,
actual_result: False,
message: Empty field(s)


 Sudoku:
# 1
__is_data_valid #2

LOG =>
expected: False,
actual_result: False,
message: Values not in valid range 1..N


 Sudoku:
# 1
__is_data_valid #2

LOG =>
expected: False,
actual_result: False,
message: Invalid value types (boolean)


 Sudoku:
# 1
# 2
[1, 4, 4, 3, 'a']
assert_sudoku_by_row #1

LOG =>
expected: False,
actual_result: False,
message: Sudoku breaking all rules at once


 Sudoku:
# 1
# 2
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[2, 3, 1, 5, 6, 4, 8, 9, 7]
[3, 1, 2, 6, 4, 5, 9, 7, 8]
[4, 5, 6, 7, 8, 9, 1, 2, 3]
[5, 6, 4, 8, 9, 7, 2, 3, 1]
[6, 4, 5, 9, 7, 8, 3, 1, 2]
[7, 8, 9, 1, 2, 3, 4, 5, 6]
[8, 9, 7, 2, 3, 1, 5, 6, 4]
[9, 7, 8, 3, 1, 2, 6, 4, 5]
# 3
# 4
Step: 3

a: 0, start: 0, end: 3
a: 1, start: 0, end: 3
a: 2, start: 0, end: 3
[1, 2, 3, 2, 3, 1, 3, 1, 2]
{1, 2, 3}
assert_sudoku_by_region

LOG =>
expected: False,
actual_result: False,
message: Sudoku with invalid boxes (little squares), but valid rows and columns

