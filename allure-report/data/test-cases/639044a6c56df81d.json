{"uid":"639044a6c56df81d","name":"Testing dir_reduc function","fullName":"kyu_5.directions_reduction.test_directions_reduction.DirectionsReductionTestCase#test_directions_reduction_2","historyId":"ea6cd75dd6b37f943cf22e009afc3d57","time":{"start":1735735771718,"stop":1735735771718,"duration":0},"description":"dir_reduc function test suite [with test_array=['NORTH', 'EAST', 'NORTH', 'EAST...'EAST', 'EAST', 'WEST', 'SOUTH'], expected=['NORTH', 'EAST']].\n\n        Test a function dir_reduc which will take an array of\n        strings and returns an array of strings with the needless\n        directions removed (W<->E or S<->N side by side).\n\n        The Haskell version takes a list of directions with\n        data Direction = North | East | West | South.\n\n        The Clojure version returns nil when the path is\n        reduced to nothing.\n\n        The Rust version takes a slice of enum Direction\n        {NORTH, SOUTH, EAST, WEST}.\n        :return:\n        ","descriptionHtml":"<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p> Test a function dir_reduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).</p>","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":6,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_DirectionsReductionTestCase","time":{"start":1735735771706,"stop":1735735771706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"dir_reduc function test suite [with test_array=['NORTH', 'EAST', 'NORTH', 'EAST...'EAST', 'EAST', 'WEST', 'SOUTH'], expected=['NORTH', 'EAST']].\n\n        Test a function dir_reduc which will take an array of\n        strings and returns an array of strings with the needless\n        directions removed (W<->E or S<->N side by side).\n\n        The Haskell version takes a list of directions with\n        data Direction = North | East | West | South.\n\n        The Clojure version returns nil when the path is\n        reduced to nothing.\n\n        The Rust version takes a slice of enum Direction\n        {NORTH, SOUTH, EAST, WEST}.\n        :return:\n        ","descriptionHtml":"<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p> Test a function dir_reduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).</p>","status":"passed","steps":[{"name":"Enter test data (['NORTH', 'EAST']) and verify the output (['NORTH', 'EAST']) vs expected (['NORTH', 'EAST'])","time":{"start":1735735771718,"stop":1735735771718,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[{"uid":"f11791a2d492f716","name":"stdout","source":"f11791a2d492f716.txt","type":"text/plain","size":95}],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_DirectionsReductionTestCase::0","time":{"start":1735735771731,"stop":1735735771731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Lists"},{"name":"suite","value":"Algorithms"},{"name":"subSuite","value":"Unit Tests"},{"name":"parentSuite","value":"Novice"},{"name":"tag","value":"FUNDAMENTALS"},{"name":"epic","value":"5 kyu"},{"name":"story","value":"Directions Reduction"},{"name":"host","value":"DESKTOP-4I7EDL5"},{"name":"thread","value":"12132-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"kyu_5.directions_reduction.test_directions_reduction"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Source/Kata","url":"https://www.codewars.com/kata/550f22f4d758534c1100025a","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"656818f467d2ca7","status":"passed","time":{"start":1735735403417,"stop":1735735403417,"duration":0}},{"uid":"cd4566d7a5ac15e","status":"passed","time":{"start":1735230832696,"stop":1735230832697,"duration":1}},{"uid":"87e95b2e4df64310","status":"passed","time":{"start":1735219693684,"stop":1735219693685,"duration":1}},{"uid":"eeca4ffc69a6239f","status":"passed","time":{"start":1735219149618,"stop":1735219149619,"duration":1}},{"uid":"1c4e6b94ea318a2a","status":"passed","time":{"start":1735218478446,"stop":1735218478446,"duration":0}},{"uid":"d8eeb4f9ea4cba14","status":"passed","time":{"start":1735146788898,"stop":1735146788898,"duration":0}}],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":6},"items":[{"uid":"6a4e391e131edc22","status":"passed","time":{"start":1735735403417,"stop":1735735403417,"duration":0}},{"uid":"dc235b2020205e4f","status":"passed","time":{"start":1735230832696,"stop":1735230832697,"duration":1}},{"uid":"26c711878c9d6cb1","status":"passed","time":{"start":1735219693684,"stop":1735219693685,"duration":1}},{"uid":"c08fe2395692df4c","status":"passed","time":{"start":1735218478446,"stop":1735218478446,"duration":0}},{"uid":"84e5fc38fd9ab66e","status":"passed","time":{"start":1735146788898,"stop":1735146788898,"duration":0}}]},"tags":["FUNDAMENTALS"]},"source":"639044a6c56df81d.json","parameterValues":[]}