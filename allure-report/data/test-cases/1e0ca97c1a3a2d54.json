{"uid":"1e0ca97c1a3a2d54","name":"Testing dir_reduc function","fullName":"kyu_5.directions_reduction.test_directions_reduction.DirectionsReductionTestCase#test_directions_reduction_4","historyId":"00b50865085ac2f2e622428a6b5b9fda","time":{"start":1735735771731,"stop":1735735771731,"duration":0},"description":"dir_reduc function test suite [with test_array=['WEST', 'NORTH', 'EAST', 'EAST'...ORTH', 'NORTH', 'SOUTH', 'EAST'], expected=['WEST', 'NORTH', 'NORTH', 'EAST']].\n\n        Test a function dir_reduc which will take an array of\n        strings and returns an array of strings with the needless\n        directions removed (W<->E or S<->N side by side).\n\n        The Haskell version takes a list of directions with\n        data Direction = North | East | West | South.\n\n        The Clojure version returns nil when the path is\n        reduced to nothing.\n\n        The Rust version takes a slice of enum Direction\n        {NORTH, SOUTH, EAST, WEST}.\n        :return:\n        ","descriptionHtml":"<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p> Test a function dir_reduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).</p>","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":6,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_DirectionsReductionTestCase","time":{"start":1735735771706,"stop":1735735771706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"dir_reduc function test suite [with test_array=['WEST', 'NORTH', 'EAST', 'EAST'...ORTH', 'NORTH', 'SOUTH', 'EAST'], expected=['WEST', 'NORTH', 'NORTH', 'EAST']].\n\n        Test a function dir_reduc which will take an array of\n        strings and returns an array of strings with the needless\n        directions removed (W<->E or S<->N side by side).\n\n        The Haskell version takes a list of directions with\n        data Direction = North | East | West | South.\n\n        The Clojure version returns nil when the path is\n        reduced to nothing.\n\n        The Rust version takes a slice of enum Direction\n        {NORTH, SOUTH, EAST, WEST}.\n        :return:\n        ","descriptionHtml":"<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p> Test a function dir_reduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).</p>","status":"passed","steps":[{"name":"Enter test data (['WEST', 'NORTH', 'NORTH', 'EAST']) and verify the output (['WEST', 'NORTH', 'NORTH', 'EAST']) vs expected (['WEST', 'NORTH', 'NORTH', 'EAST'])","time":{"start":1735735771731,"stop":1735735771731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[{"uid":"6c5f3b9e48ff411a","name":"stdout","source":"6c5f3b9e48ff411a.txt","type":"text/plain","size":146}],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_DirectionsReductionTestCase::0","time":{"start":1735735771731,"stop":1735735771731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Lists"},{"name":"suite","value":"Algorithms"},{"name":"subSuite","value":"Unit Tests"},{"name":"parentSuite","value":"Novice"},{"name":"tag","value":"FUNDAMENTALS"},{"name":"epic","value":"5 kyu"},{"name":"story","value":"Directions Reduction"},{"name":"host","value":"DESKTOP-4I7EDL5"},{"name":"thread","value":"12132-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"kyu_5.directions_reduction.test_directions_reduction"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Source/Kata","url":"https://www.codewars.com/kata/550f22f4d758534c1100025a","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"356390c95821f12b","status":"passed","time":{"start":1735735403423,"stop":1735735403423,"duration":0}},{"uid":"b9462323f1f3587","status":"passed","time":{"start":1735230832706,"stop":1735230832707,"duration":1}},{"uid":"d031d01be660554c","status":"passed","time":{"start":1735219693692,"stop":1735219693693,"duration":1}},{"uid":"219b5f8ee6fc2446","status":"passed","time":{"start":1735219149627,"stop":1735219149627,"duration":0}},{"uid":"26bd491de7678c00","status":"passed","time":{"start":1735218478454,"stop":1735218478455,"duration":1}},{"uid":"9d785db088f031be","status":"passed","time":{"start":1735146788914,"stop":1735146788914,"duration":0}}],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":6},"items":[{"uid":"98947425e4ac33fd","status":"passed","time":{"start":1735735403423,"stop":1735735403423,"duration":0}},{"uid":"6f7c43d260d8d863","status":"passed","time":{"start":1735230832706,"stop":1735230832707,"duration":1}},{"uid":"7fd16f66ee9840ea","status":"passed","time":{"start":1735219693692,"stop":1735219693693,"duration":1}},{"uid":"55f2ea689284e973","status":"passed","time":{"start":1735218478454,"stop":1735218478455,"duration":1}},{"uid":"c1367862d6e6db13","status":"passed","time":{"start":1735146788914,"stop":1735146788914,"duration":0}}]},"tags":["FUNDAMENTALS"]},"source":"1e0ca97c1a3a2d54.json","parameterValues":[]}