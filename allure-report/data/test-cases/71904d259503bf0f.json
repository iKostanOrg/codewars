{
  "uid" : "71904d259503bf0f",
  "name" : "Testing Line Safari functionality - POSITIVE",
  "fullName" : "kyu_3.line_safari_is_that_a_line.test_line_positive.LinePositiveTestCase#test_line_positive",
  "historyId" : "b2b12ad2385368d21ad81dc66e7b08ab",
  "time" : {
    "start" : 1589664227902,
    "stop" : 1589664227913,
    "duration" : 11
  },
  "description" : "\n        Testing Line Safari functionality\n        Positive test cases\n        ",
  "descriptionHtml" : "<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p>The function should return true/false if it can detect a one and only one \"valid\" line joining those points.</p>",
  "status" : "failed",
  "statusMessage" : "teamcity.diff_tools.EqualsAssertionError:  :: True != False",
  "statusTrace" : "self = <kyu_3.line_safari_is_that_a_line.test_line_positive.LinePositiveTestCase testMethod=test_line_positive>\n\n    def test_line_positive(self):\n        \"\"\"\n        Testing Line Safari functionality\n        Positive test cases\n        \"\"\"\n    \n        allure.dynamic.title(\"Testing Line Safari functionality - POSITIVE\")\n        allure.dynamic.severity(allure.severity_level.NORMAL)\n        allure.dynamic.description_html(\n            '<h3>Codewars badge:</h3>'\n            '<img src=\"https://www.codewars.com/users/myFirstCode'\n            '/badges/large\">'\n            '<h3>Test Description:</h3>'\n            \"<p>The function should return true/false if it can detect a one \"\n            \"and only one \\\"valid\\\" line joining those points.</p>\")\n    \n        test_data = (\n            [\"           \",\n             \"X---------X\",\n             \"           \",\n             \"           \"],\n            [\"     \",\n             \"  X  \",\n             \"  |  \",\n             \"  |  \",\n             \"  X  \"],\n            [\"                    \",\n             \"     +--------+     \",\n             \"  X--+        +--+  \",\n             \"                 |  \",\n             \"                 X  \",\n             \"                    \"],\n            [\"                     \",\n             \"    +-------------+  \",\n             \"    |             |  \",\n             \" X--+      X------+  \",\n             \"                     \"],\n            [\"    +----+  \",\n             \"    |+--+|  \",\n             \"    ||X+||  \",\n             \"    |+-+||  \",\n             \"    +---+|  \",\n             \"X--------+  \"],\n            [\"   +-----+  \",\n             \"   |+---+|  \",\n             \"   ||+-+||  \",\n             \"   |||X+||  \",\n             \"   X|+--+|  \",\n             \"    +----+  \"],\n            [\"                      \",\n             \"   +-------+          \",\n             \"   |      +++---+     \",\n             \"X--+      +-+   X     \"],\n        )\n    \n        expected = True\n        for grid in test_data:\n            actual_result = line(grid)\n    \n            print()\n            for row in grid:\n                print(row)\n    \n            print_log(expected=expected,\n                      actual_result=actual_result)\n    \n            with allure.step(\"Enter a test grid and compare \"\n                             \"the output vs expected result\"):\n>               self.assertEqual(expected, actual_result)\n\nkyu_3\\line_safari_is_that_a_line\\test_line_positive.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <kyu_3.line_safari_is_that_a_line.test_line_positive.LinePositiveTestCase testMethod=test_line_positive>\nfirst = True, second = False, msg = None\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n            old(self, first, second, msg)\n            return\n        except AssertionError as native_error:\n            if not test_filter or test_filter(self):\n                error = EqualsAssertionError(first, second, msg)\n                if error.can_be_serialized():\n>                   raise error\nE                   teamcity.diff_tools.EqualsAssertionError:  :: True != False\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2019.1.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:38: EqualsAssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1589664227901,
      "stop" : 1589664227901,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n        Testing Line Safari functionality\n        Positive test cases\n        ",
    "descriptionHtml" : "<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p>The function should return true/false if it can detect a one and only one \"valid\" line joining those points.</p>",
    "status" : "failed",
    "statusMessage" : "teamcity.diff_tools.EqualsAssertionError:  :: True != False",
    "statusTrace" : "self = <kyu_3.line_safari_is_that_a_line.test_line_positive.LinePositiveTestCase testMethod=test_line_positive>\n\n    def test_line_positive(self):\n        \"\"\"\n        Testing Line Safari functionality\n        Positive test cases\n        \"\"\"\n    \n        allure.dynamic.title(\"Testing Line Safari functionality - POSITIVE\")\n        allure.dynamic.severity(allure.severity_level.NORMAL)\n        allure.dynamic.description_html(\n            '<h3>Codewars badge:</h3>'\n            '<img src=\"https://www.codewars.com/users/myFirstCode'\n            '/badges/large\">'\n            '<h3>Test Description:</h3>'\n            \"<p>The function should return true/false if it can detect a one \"\n            \"and only one \\\"valid\\\" line joining those points.</p>\")\n    \n        test_data = (\n            [\"           \",\n             \"X---------X\",\n             \"           \",\n             \"           \"],\n            [\"     \",\n             \"  X  \",\n             \"  |  \",\n             \"  |  \",\n             \"  X  \"],\n            [\"                    \",\n             \"     +--------+     \",\n             \"  X--+        +--+  \",\n             \"                 |  \",\n             \"                 X  \",\n             \"                    \"],\n            [\"                     \",\n             \"    +-------------+  \",\n             \"    |             |  \",\n             \" X--+      X------+  \",\n             \"                     \"],\n            [\"    +----+  \",\n             \"    |+--+|  \",\n             \"    ||X+||  \",\n             \"    |+-+||  \",\n             \"    +---+|  \",\n             \"X--------+  \"],\n            [\"   +-----+  \",\n             \"   |+---+|  \",\n             \"   ||+-+||  \",\n             \"   |||X+||  \",\n             \"   X|+--+|  \",\n             \"    +----+  \"],\n            [\"                      \",\n             \"   +-------+          \",\n             \"   |      +++---+     \",\n             \"X--+      +-+   X     \"],\n        )\n    \n        expected = True\n        for grid in test_data:\n            actual_result = line(grid)\n    \n            print()\n            for row in grid:\n                print(row)\n    \n            print_log(expected=expected,\n                      actual_result=actual_result)\n    \n            with allure.step(\"Enter a test grid and compare \"\n                             \"the output vs expected result\"):\n>               self.assertEqual(expected, actual_result)\n\nkyu_3\\line_safari_is_that_a_line\\test_line_positive.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <kyu_3.line_safari_is_that_a_line.test_line_positive.LinePositiveTestCase testMethod=test_line_positive>\nfirst = True, second = False, msg = None\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n            old(self, first, second, msg)\n            return\n        except AssertionError as native_error:\n            if not test_filter or test_filter(self):\n                error = EqualsAssertionError(first, second, msg)\n                if error.can_be_serialized():\n>                   raise error\nE                   teamcity.diff_tools.EqualsAssertionError:  :: True != False\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2019.1.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:38: EqualsAssertionError",
    "steps" : [ {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227903,
        "stop" : 1589664227903,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227903,
        "stop" : 1589664227903,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227905,
        "stop" : 1589664227905,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227906,
        "stop" : 1589664227906,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227908,
        "stop" : 1589664227908,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227910,
        "stop" : 1589664227910,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter a test grid and compare the output vs expected result",
      "time" : {
        "start" : 1589664227911,
        "stop" : 1589664227912,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "teamcity.diff_tools.EqualsAssertionError:  :: True != False\n",
      "statusTrace" : "  File \"C:\\Users\\superadmin\\Documents\\GitHub\\codewars\\kyu_3\\line_safari_is_that_a_line\\test_line_positive.py\", line 102, in test_line_positive\n    self.assertEqual(expected, actual_result)\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2019.1.3\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py\", line 38, in _patched_equals\n    raise error\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "e9ce0d55719f1db2",
      "name" : "stdout",
      "source" : "e9ce0d55719f1db2.txt",
      "type" : "text/plain",
      "size" : 14523
    } ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1589664228002,
      "stop" : 1589664228002,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "Line Safari - Is that a line?"
  }, {
    "name" : "subSuite",
    "value" : "Unit Tests"
  }, {
    "name" : "tag",
    "value" : "ALGORITHMS"
  }, {
    "name" : "suite",
    "value" : "Algorithms"
  }, {
    "name" : "tag",
    "value" : "STRINGS"
  }, {
    "name" : "parentSuite",
    "value" : "Competent"
  }, {
    "name" : "feature",
    "value" : "String"
  }, {
    "name" : "epic",
    "value" : "3 kyu"
  }, {
    "name" : "host",
    "value" : "DESKTOP-RJASUD2"
  }, {
    "name" : "thread",
    "value" : "6388-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "kyu_3.line_safari_is_that_a_line.test_line_positive"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Source/Kata",
    "url" : "https://www.codewars.com/kata/59c5d0b0a25c8c99ca000237/train/python",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "STRINGS", "ALGORITHMS" ]
  },
  "source" : "71904d259503bf0f.json",
  "parameterValues" : [ ]
}